var page_json = {
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"view-configs\">View configs</h1>\n<p>Most of other frameworks compile templates into JavaScript functions, which then render the content. Here templates\nare compiled into configs for views - JavaScript classes. This has lots of benefits: framework has transparent architecture and behaviour,\neasy to debug, simple, fast and predictable.</p>\n<p>There are four views, inherited from <a href=\"/www/doc/class/Lava.view.Abstract.html\">Lava.view.Abstract</a>:</p>\n<ul>\n<li><a href=\"/www/doc/class/Lava.view.If.html\">Lava.view.If</a> - conditionally displays it&#39;s template</li>\n<li><a href=\"/www/doc/class/Lava.view.Foreach.html\">Lava.view.Foreach</a> - displays a copy of template for each item from argument</li>\n<li><a href=\"/www/doc/class/Lava.view.Expression.html\">Lava.view.Expression</a> - displays result of an expression</li>\n<li><a href=\"/www/doc/class/Lava.view.View.html\">Lava.view.View</a> - helper view, to create a template with container</li>\n</ul>\n<p>You have already used three of them in previous lessons: when you place <code>{#foreach(...)}</code> or <code>{#if(...)}</code>\nin your template - a config is created for <a href=\"/www/doc/class/Lava.view.Foreach.html\">Lava.view.Foreach</a> and <a href=\"/www/doc/class/Lava.view.If.html\">Lava.view.If</a> classes respectively.\n<a href=\"/www/doc/class/Lava.view.Expression.html\">Expression</a> view has special syntax for it: <code>{#&gt; ... }</code>, which also creates a config.</p>\n<p>Views can not be inserted into DOM by themselves - they can only exist inside a widget. Widgets can contain\nuser logic and event handlers. All widgets are inherited from <a href=\"/www/doc/class/Lava.widget.Standard.html\">Lava.widget.Standard</a>, which is inherited\nfrom <a href=\"/www/doc/class/Lava.view.View.html\">Lava.view.View</a>. So, widget is also a view, with all it&#39;s methods and lifecycle.</p>\n<p>In this lesson we will learn how widgets work by manually creating their configs.\nLet&#39;s start with totally blank page:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">html</span> <span class=\"hljs-attribute\">lang</span>=<span class=\"hljs-value\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"http://ajax.googleapis.com/ajax/libs/mootools/1.5.1/mootools-yui-compressed.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"http://lava-framework.com/lib/lava-master-DEV.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span>&gt;</span><span class=\"javascript\">\n        window.addEvent(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            Lava.bootstrap();\n        });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">html</span>&gt;</span></pre></div></div></div><p><code>lava-app</code> attribute was removed from &lt;body&gt;, so now it&#39;s a common tag, and it&#39;s content is not parsed. \nNow we will manually create a widget and insert it into the page:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">window.addEvent(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n    Lava.bootstrap();\n    <span class=\"hljs-keyword\">var</span> widget = <span class=\"hljs-keyword\">new</span> Lava.widget.Standard({\n        is_extended: <span class=\"hljs-literal\">true</span>,\n        container: {type: <span class=\"hljs-string\">'Element'</span>, tag_name: <span class=\"hljs-string\">'div'</span>},\n        template: [<span class=\"hljs-string\">'Hello world!'</span>]\n    });\n    widget.inject(document.body, <span class=\"hljs-string\">'Top'</span>);\n});</pre></div></div></div><p>You will see a &lt;div&gt; tag with <span class=\"api-string\">&quot;Hello world!&quot;</span> inside it.</p>\n<p>All framework configs are described in <code>support/</code> folder of Lava repository.\nFiles from this folder are not used anywhere except in JSDoc comments.\nYou can have a look at the <a href=\"/www/doc/object/Support.html\">Support</a> page, which contains all the config formats.</p>\n<p>Widget config is described in <a href=\"/www/doc/object/Support.html#member=_cWidget\">_cWidget</a> structure - you can follow the link to see what else can be there.\nWidget configs can be inherited just like classes, that&#39;s why we need to supply <code>is_extended</code> property. \nConfig extension will not be covered in tutorials, but you can read the corresponding <a href=\"/www/doc/reference/ConfigExtension.html\">reference</a>.</p>\n<p><code>container</code> config property is a config for <a href=\"/www/doc/class/Lava.view.container.Element.html\">Lava.view.container.Element</a> class, and has type <a href=\"/www/doc/object/Support.html#member=_cElementContainer\">_cElementContainer</a>.\n<code>template</code> itself is config for <a href=\"/www/doc/class/Lava.system.Template.html\">Lava.system.Template</a> class. It&#39;s an array with strings, \nview and widget configs, and some other structures which are recognized by Template class.</p>\n<p>Let&#39;s add an Expression view:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">window.addEvent(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n    Lava.bootstrap();\n    <span class=\"hljs-keyword\">var</span> widget = <span class=\"hljs-keyword\">new</span> Lava.widget.Standard({\n        is_extended: <span class=\"hljs-literal\">true</span>,\n        container: {type: <span class=\"hljs-string\">'Element'</span>, tag_name: <span class=\"hljs-string\">'div'</span>},\n        template: [\n            <span class=\"hljs-string\">'Hello '</span>,\n            {\n                type: <span class=\"hljs-string\">\"view\"</span>,\n                <span class=\"hljs-keyword\">class</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n                argument: Lava.ExpressionParser.parse(<span class=\"hljs-string\">\"your_name\"</span>)\n            }\n        ]\n    });\n    widget.set(<span class=\"hljs-string\">\"your_name\"</span>, <span class=\"hljs-string\">\"World\"</span>);\n    widget.inject(document.body, <span class=\"hljs-string\">'Top'</span>);\n\n    <span class=\"hljs-comment\">// let's save it for future use</span>\n    window.demo_widget = widget;\n});</pre></div></div></div><p>Now you will see <code>&lt;div&gt;Hello World&lt;/div&gt;</code> inside document&#39;s body. In the above example the widget was exported to\nglobal <code>demo_widget</code> property, so now you can access it from console:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">demo_widget.set(<span class=\"hljs-string\">\"your_name\"</span>, <span class=\"hljs-string\">\"Jack\"</span>);\nLava.refreshViews();</pre></div></div></div><p><code>argument</code> config from above example is too complex to write by hands, and you should never try to do it - \nyou must always use ExpressionParser to do that job for you.</p>\n<p>You need to know how template configs work, but you do not need to write them by hands. \nConfigs are parsed by <code>Lava.TemplateParser</code>:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">window.addEvent(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n    Lava.bootstrap();\n    <span class=\"hljs-keyword\">var</span> widget = <span class=\"hljs-keyword\">new</span> Lava.widget.Standard({\n        is_extended: <span class=\"hljs-literal\">true</span>,\n        container: {type: <span class=\"hljs-string\">'Element'</span>, tag_name: <span class=\"hljs-string\">'div'</span>},\n        template: Lava.TemplateParser.parse(<span class=\"hljs-string\">\"Hello {#&gt; your_name}!\"</span>)\n    });\n    widget.set(<span class=\"hljs-string\">\"your_name\"</span>, <span class=\"hljs-string\">\"World\"</span>);\n    widget.inject(document.body, <span class=\"hljs-string\">'Top'</span>);\n});</pre></div></div></div><p>Final example:\n<iframe style=\"height: 30em; width: 100%\" src=\"http://embed.plnkr.co/fHeYSF/index.html\"></iframe>\n<i><a href=\"/www/demos/tutorials/ViewConfigs.html\">Alternative link</a></i></p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}