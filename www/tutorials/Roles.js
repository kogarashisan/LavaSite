var page_json = {
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"roles\">Roles</h1>\n<p>As you remember, you can not access child views directly. When view is created - you can access it&#39;s parents,\nbut you can not control the moment when views are created or destroyed. \nRoles is the way to access child views and widgets.</p>\n<p>You may think of roles as of special events, which are dispatched when a view is created.\nRoles have same format as events, and they are handled and dispatched in similar way.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Controller</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">'Lava.widget.MyWidget'</span>,\n{\n  Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>,\n  name: <span class=\"hljs-string\">\"my_widget\"</span>,\n\n  _role_handlers: {\n    my_panel: <span class=\"hljs-string\">'_handlePanel'</span>\n  },\n\n  _my_panel: <span class=\"hljs-literal\">null</span>,\n\n  _handlePanel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(view, template_arguments)</span> {</span>\n\n    view.set(<span class=\"hljs-string\">'is_expanded'</span>, <span class=\"hljs-literal\">false</span>);\n    view.set(<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">\"Hello example\"</span>);\n    view.set(<span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">\"Hello World!\"</span>);\n\n    <span class=\"hljs-comment\">// you can also attach listeners</span>\n    <span class=\"hljs-comment\">// var listener = view.on('expanded', this._onPanelExpanded, this);</span>\n\n    <span class=\"hljs-keyword\">this</span>._my_panel = view;\n\n  }\n});</pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Template</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"MyWidget\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">collapsible-panel</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:roles</span>=<span class=\"hljs-value\">\"$my_widget.my_panel\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"panel-info\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">collapsible-panel</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div></div></div><p>When panel inside the widget is created - it dispatches a role &quot;my_panel&quot; to <code>$my_widget</code>, \nwhich is handled by <code>_handlePanel</code>. Now you have the panel instance and you can do what you want with it:\nset properties, attach listeners, or save it into local variable.</p>\n<p>Roles can be bubbling - like events, bubbling roles are dispatched to all parent widgets.</p>\n<p>Final result:\n<iframe style=\"height: 26em; width: 100%\" src=\"http://embed.plnkr.co/iEykks/preview\"></iframe>\n<i><a href=\"/www/demos/tutorials/Roles.html\">Alternative link</a></i></p>\n<h2 id=\"note-on-view-collections\">Note on view collections</h2>\n<p>Sometimes you need to access views that are created dynamically, for example in Foreach loops.\nThese views can be created and destroyed at any moment, and naturally you must not interact with destroyed views.\nIn this case, you should listen to the &quot;destroy&quot; event. </p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> listener = view.on(<span class=\"hljs-string\">\"destroy\"</span>, <span class=\"hljs-keyword\">this</span>._onViewDestroyed, <span class=\"hljs-keyword\">this</span>);</pre></div></div></div><p>When you have received this event - the view is already destroyed, and you must not call it&#39;s methods or access properties. \nAll you can - remove references to destroyed view from your local collections.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}