{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"receiving-dom-events\">Receiving DOM events</h1>\n<p>Lava framework delegates events: you only need to specify which events you want to delegate,\nand which widgets should receive them.</p>\n<p>Let&#39;s define a widget with event handler:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">'Lava.widget.HelloApp'</span>,\n{\n    Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>,\n\n    _properties: {\n        count_clicked: <span class=\"hljs-number\">0</span>\n    },\n\n    _event_handlers: {\n        button_click: <span class=\"hljs-string\">'_onButtonClick'</span>\n    },\n\n    _onButtonClick: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(dom_event_name, dom_event, view, template_arguments)</span> {</span>\n\n        <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">\"count_clicked\"</span>, <span class=\"hljs-keyword\">this</span>._properties.count_clicked + <span class=\"hljs-number\">1</span>);\n\n    }\n});</pre></div></div><p><code>button_click</code> from <code>_event_handlers</code> is the actual event name - that&#39;s how you will reference your event in templates.\n<code>_onButtonClick</code> is name of the event handler. Notice, that we can get <code>count_clicked</code> variable directly, but we assign it\nusing <code>set</code> method - it generates &quot;changed&quot; events for the template. <b>You should never set widget properties directly,\notherwise your templates will not be able to update themselves.</b></p>\n<p>Let&#39;s use this handler in template:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span> <span class=\"hljs-attribute\">lava-app</span>=<span class=\"hljs-value\">\"HelloApp\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:event:click</span>=<span class=\"hljs-value\">\"button_click\"</span>&gt;</span>\n        I was clicked {#&gt; count_clicked} times\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></div></div><p>Only containers can delegate events, so the element is transformed into a <a href=\"/www/doc.html#class=Lava.view.View\">Lava.view.View</a> \nwith <a href=\"/www/doc.html#class=Lava.view.container.Element\">Lava.view.container.Element</a> container - this is done with <code>x:type=&quot;view&quot;</code> attribute.</p>\n<p>Final result:\n<iframe style=\"height: 26em; width: 100%\" src=\"http://embed.plnkr.co/HgppDj/preview\"></iframe>\n<i><a href=\"/www/demos/tutorials/Events.html\">Alternative link</a></i></p>\n<h2 id=\"event-dispatch-algorithm\">Event dispatch algorithm</h2>\n<p>When you click on the &lt;div&gt; element from the above example - framework discovers that it belongs to a container,\nand that it has event delegation: DOM <code>click</code> event should be delegated to <code>button_click</code> widget handler.</p>\n<p>Event is dispatched from the view, which owns the container. \nFramework dispatches <code>button_click</code> to <b>all</b> parent widgets of that view. If they have <code>button_click</code> handler in \ntheir <code>_event_handlers</code> property - then corresponding callback will be executed.</p>\n<p>View from above example has one parent, which receives the event - the HelloApp instance.</p>\n<h2 id=\"targeted-events\">Targeted events</h2>\n<p>When you create a bubbling property reference - it binds to the first view, that has it.\nUnlike property references, bubbling events are dispatched to all parent widgets of the container.</p>\n<p>Events can be targeted just like property references:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:event:click</span>=<span class=\"hljs-value\">\"$widget.button_click\"</span>&gt;</span> ... <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:event:click</span>=<span class=\"hljs-value\">\"#hello_app.button_click\"</span>&gt;</span> ... <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><p><code>$widget.button_click</code> will target parent widget with name <span class=\"api-string\">&quot;widget&quot;</span>, \nand <code>#hello_app</code> will target widget with <span class=\"api-string\">&quot;hello_app&quot;</span> id.\n<b>You should always prefer targeted events over bubbling.</b></p>\n<h2 id=\"event-arguments\">Event arguments</h2>\n<p>Naturally, events can be passed arguments. Here is an example of clickable list:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Script</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">'Lava.widget.HelloApp'</span>,\n{\n    Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>,\n    name: <span class=\"hljs-string\">\"hello_app\"</span>,\n\n    _properties: {\n        selected_person: <span class=\"hljs-literal\">null</span>,\n        people: [\n            {title: <span class=\"hljs-string\">\"Steve Jobs\"</span>, birth_year: <span class=\"hljs-number\">1955</span>},\n            {title: <span class=\"hljs-string\">\"Bill Gates\"</span>, birth_year: <span class=\"hljs-number\">1955</span>},\n            {title: <span class=\"hljs-string\">\"Linus Torvalds\"</span>, birth_year: <span class=\"hljs-number\">1969</span>}\n        ]\n    },\n\n    _event_handlers: {\n        item_click: <span class=\"hljs-string\">'_onItemClick'</span>\n    },\n\n    _onItemClick: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(dom_event_name, dom_event, view, template_arguments)</span> {</span>\n\n        <span class=\"hljs-comment\">// template_arguments[0] is the first argument, which was passed to event</span>\n        <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">\"selected_person\"</span>, template_arguments[<span class=\"hljs-number\">0</span>]);\n\n    }\n});</pre></div><div class=\"api-code-header api-code-header-blue\">Template</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre><pre class=\"lava-code-content hljs xml\">{#foreach($hello_app.people) as=person}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> \n    <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:background</span>=<span class=\"hljs-value\">\"(person == $hello_app.selected_person) ? 'yellow' : null\"</span>\n    <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:event:click</span>=<span class=\"hljs-value\">\"$hello_app.item_click(person)\"</span>&gt;</span>\n    {#&gt; person.title}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n{/foreach}\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\nSelected person: {#&gt; $hello_app.selected_person.title}<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">br</span>/&gt;</span>\nBirth year: {#&gt; $hello_app.selected_person.birth_year}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><p>Foreach view sets &quot;person&quot; property to views inside it. It&#39;s used in the click event: <code>$hello_app.item_click(person)</code>.\nAll arguments that you pass to event handlers are available as <code>template_arguments</code> array.</p>\n<p>Arguments are evaluated at the moment when event is dispatched, no bindings for them are created.</p>\n<p>Final result:\n<iframe style=\"height: 26em; width: 100%\" src=\"http://embed.plnkr.co/vHBnGR/preview\"></iframe>\n<i><a href=\"/www/demos/tutorials/Events2.html\">Alternative link</a></i></p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}