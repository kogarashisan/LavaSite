{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"widget-properties\">Widget properties</h1>\n<p><a href=\"/www/doc.html#class=Lava.widget.Standard\">Lava.widget.Standard</a> overrides the <code>get()</code> and <code>set()</code> methods to provide validation and give you better control \nover widget properties. Initial property values are stored in <code>_properties</code> class field, while additional behaviour\ncan be specified in <code>_property_descriptors</code>:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">\"Lava.widget.MyWidget\"</span>,\n{\n    Extends: <span class=\"hljs-string\">\"Lava.widget.Standard\"</span>,\n\n    _property_descriptors: {\n        readonly_property: {is_readonly: <span class=\"hljs-literal\">true</span>},\n        boolean_property: {type: <span class=\"hljs-string\">'Boolean'</span>},\n        gender: {type: <span class=\"hljs-string\">'Set'</span>, allowed_values: [<span class=\"hljs-string\">'Male'</span>, <span class=\"hljs-string\">'Female'</span>], is_nullable: <span class=\"hljs-literal\">true</span>},\n        my_property: {getter: <span class=\"hljs-string\">'_getMyProperty'</span>, setter: <span class=\"hljs-string\">'_setMyProperty'</span>}\n    },\n\n    _properties: {\n        readonly_property: <span class=\"hljs-string\">\"Only widget itself can change this text\"</span>,\n        boolean_property: <span class=\"hljs-literal\">true</span>,\n        gender: <span class=\"hljs-literal\">null</span>,\n        my_property: <span class=\"hljs-literal\">null</span>,\n\n        <span class=\"hljs-comment\">// property without descriptor</span>\n        basic_property: <span class=\"hljs-literal\">null</span>\n    },\n\n    changeReadonlyProperty: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n\n        <span class=\"hljs-keyword\">this</span>._set(<span class=\"hljs-string\">'readonly_property'</span>, <span class=\"hljs-built_in\">Math</span>.random());\n\n    },\n\n    _getMyProperty: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._properties.my_property;\n\n    },\n\n    _setMyProperty: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value, name)</span> {</span>\n\n        <span class=\"hljs-comment\">// name here equals to \"my_property\"</span>\n\n        <span class=\"hljs-keyword\">this</span>.changeReadonlyProperty();\n        <span class=\"hljs-keyword\">this</span>._set(name, value);\n\n    }\n\n});</pre></div></div><p>Property descriptor can have the following fields:</p>\n<p><b>is_readonly</b></p>\n<p>If property is readonly, then <code>set()</code> throws an error.</p>\n<p><b>is_nullable</b></p>\n<p>Allow <span class=\"api-keyword\">null</span> in addition to other property values.</p>\n<p>If property has descriptor, and you want it to be nullable - then you must explicitly specify <code>is_nullable: false</code>.\nIn example above <code>boolean_property</code> and <code>my_property</code> can not be assigned nulls, while <code>basic_property</code> can,\ncause it does not have a descriptor.</p>\n<p><b>type</b></p>\n<p>A type from <a href=\"/www/doc.html#object=Lava.types\">Lava.types</a>, which is used for validation.</p>\n<p>You must assign only valid values to properties: for example, you must not assign numbers to Boolean fields,\nor you will get exception. However, this validation <b>is enabled only in DEBUG mode</b> \nand inappropriate for checking user input.</p>\n<p>In the example above, the <code>gender</code> property has additional type-specific data in it - <code>allowed_values</code>.\nWhen widget checks property value for validity, it passes property descriptor to the type, like this:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.types.Set.isValidValue(<span class=\"hljs-string\">\"Male\"</span>, <span class=\"hljs-keyword\">this</span>._property_descriptors.gender);</pre></div></div><p>The <a href=\"/www/doc.html#object=Lava.types;member=Set\">types#Set</a> type uses <code>allowed_values</code> from descriptor to check for allowed strings.</p>\n<p><b>&quot;setter&quot; and &quot;getter&quot;</b></p>\n<p>Class methods, used to get and set property values.</p>\n<p>Property setter will be called only when new property value differs from previous.\nRemember: the order of arguments in setters is reversed (<code>value, name</code> instead of <code>name, value</code>).</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}