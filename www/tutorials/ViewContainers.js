{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"containers\">Containers</h1>\n<p>Each view can have a container. Views with containers can update themselves independently from their parent views.\nIf view does not have a container - than it asks it&#39;s parent to update it.</p>\n<p>Here is an example of <i>expression</i> view without container:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span> <span class=\"hljs-attribute\">lava-app</span>=<span class=\"hljs-value\">\"HelloApp\"</span>&gt;</span>\n    Hello {#&gt; your_name}!\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></div></div><p>When the page renders, you will see something like this in your browser:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span> <span class=\"hljs-attribute\">lava-app</span>=<span class=\"hljs-value\">\"HelloApp\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"e1\"</span>&gt;</span>\n    Hello World!\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></div></div><p>As you see, there is no possibility to update <span class=\"api-string\">&quot;World&quot;</span> independently from it&#39;s surrounding text -\nit was rendered and inserted into the page as one text element.\nWhen <code>your_name</code> property changes - the expression view will ask it&#39;s <b>nearest parent with container</b> to update itself.\nIn this case, it will be HelloApp widget: it will render and replace everything inside the &lt;body&gt; tag -\nit&#39;s container.</p>\n<h2 id=\"morph-containers\">Morph containers</h2>\n<p>This container represents two &lt;script&gt; tags with content between them, like this:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs xml\">Hello <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">'c123s'</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">'x'</span>&gt;</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>World<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">'c123e'</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">'x'</span>&gt;</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>!</pre></div></div><p>Content between the &lt;script&gt; tags can be replaced.\nTo give your views a <a href=\"/www/doc.html#class=Lava.view.container.Morph\">Morph</a> container - you should use &quot;$&quot; sign instead of &quot;#&quot;:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><pre class=\"lava-code-content hljs xml\">&lt;body lava-app=\"HelloApp\"&gt;\n    Hello {$&gt; your_name}!\n\n    {$if(your_name.length &lt; 3)}\n        Error: your name is too short\n    {/if}\n&lt;/body&gt;</pre></div></div><p>Now, if <code>your_name</code> changes - views will update themselves independently from each other.</p>\n<h2 id=\"element-containers\">Element containers</h2>\n<p>You can give your views an <a href=\"/www/doc.html#class=Lava.view.container.Element\">Element</a> container with special &quot;control attribute&quot; syntax:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><pre class=\"lava-code-content hljs xml\">&lt;body lava-app=\"HelloApp\"&gt;\n    &lt;div x:type=\"container\"&gt;\n        {#if(your_name.length &lt; 3)}\n            Error: your name is too short\n        {/if}\n    &lt;/div&gt;\n&lt;/body&gt;</pre></div></div><p>Without <code>x:type=&quot;container&quot;</code> attribute - the &lt;div&gt; element would be common text. \nThis attribute transforms it into config for Element container class and gives that container to the view inside it.\nWhen the page renders - you will see a &lt;div&gt; inside &lt;body&gt;.</p>\n<h2 id=\"exercise\">Exercise</h2>\n<p>Each view and widget in Lava has global unique identifier (GUID).\nOpen the <a href=\"/www/demos/tutorials/TemplatesIntro_1.html\" target=\"_blank\">previous example</a> in new window and inspect it&#39;s DOM structure.\nYou will see automatically generated IDs on all container elements - they equal to their view&#39;s GUIDs.</p>\n<p>You can get view and widget instances by their GUIDs. Make sure, that body has <code>id=&quot;e1&quot;</code> and type in console:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> hello_widget = Lava.view_manager.getViewByGuid(<span class=\"hljs-number\">1</span>);</pre></div></div><p>This will get the owner of the &lt;body&gt; container - the HelloApp widget instance (notice, that &quot;e&quot; prefix was removed). \nNow you can set it&#39;s properties. Type in console:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs javascript\">hello_widget.set(<span class=\"hljs-string\">'your_name'</span>, <span class=\"hljs-string\">'Jack'</span>);</pre></div></div><p>You will not see changes immediately: framework caches all changes for performance reasons. \nTo bring your changes to DOM - you can click anywhere on page, or make a call to</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.refreshViews();</pre></div></div><p>Each DOM event handler ends with a call to <code>refreshViews</code>, that&#39;s why you see changes when you click on page.\nThis matters when you make AJAX calls - they all should end with a call to <code>Lava.refreshViews()</code>.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}