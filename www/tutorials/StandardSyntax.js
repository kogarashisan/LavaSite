{
	type: "widget",
	is_extended: true,
	template: ["<h2 id=\"standard-syntax\">Standard syntax</h2>\n<p>As you remember, templates in Lava are compiled into configs for view and widget classes. \nSyntax sugar is insufficient to write complex configuration, that&#39;s why the standard syntax exists. \nStandard syntax is unified (same rules for all widgets), has more possibilities\nand sometimes it may be more convenient than sugar.</p>\n<p>So, what is a widget in Lava: in fact it&#39;s a common JavaScript object with configuration for some <a href=\"/www/doc.html#object=Lava.ClassManager\">Lava.ClassManager</a> class.\nIt contains the class name of it&#39;s controller, named templates (includes), container configuration and various config options.\nThis object can be inserted into template, and what is also important, widget configs can be inherited just like\nJavaScript classes: child config inherits all properties from parent configuration, and can define it&#39;s own.</p>\n<p>Tags from the &quot;x:&quot; namespace are called &quot;directives&quot;. &lt;x:widget&gt; directive inserts an object with \nwidget configuration into the template:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><pre class=\"lava-code-content hljs xml\">Some text\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_template</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span>\nAnother text</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre><pre class=\"lava-code-content hljs javascript\">[\n    <span class=\"hljs-string\">\"\\r\\nSome text\\r\\n\"</span>,\n    {\n        template: [<span class=\"hljs-string\">\"Hello World\"</span>],\n        real_class: <span class=\"hljs-string\">\"Standard\"</span>,\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n        extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n        type: <span class=\"hljs-string\">\"widget\"</span>\n    },\n    <span class=\"hljs-string\">\"\\r\\nAnother text\\r\\n\"</span>\n]</pre></div></div><p>This will be rendered as &quot;Some text Hello World Another text&quot;. As you see, content of the &lt;main_template&gt; tag became\nwidget&#39;s template, and widget&#39;s class will be &quot;Lava.widget.Standard&quot; (&quot;Lava.widget&quot; is default prefix for widget classes).</p>\n<p>Here is an inline progress bar widget:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 400px; height: 30px; border: 1px solid black; position: relative\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"value * 4 + 'px'\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"height:30px; background: orange; position:absolute\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 100%;text-align: center;position: absolute;color: black;font-weight: bold;\"</span>&gt;</span>{#&gt; $widget.value + '%'}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n    {value: 0}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n</pre><pre class=\"lava-code-content hljs javascript\">[\n    <span class=\"hljs-string\">\"\\r\\n\"</span>,\n    {\n        template: [\n            <span class=\"hljs-string\">\"\\r\\n\\t\\t\"</span>,\n            {\n                type: <span class=\"hljs-string\">\"view\"</span>,\n                <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n                container: {\n                    type: <span class=\"hljs-string\">\"Element\"</span>,\n                    tag_name: <span class=\"hljs-string\">\"div\"</span>,\n                    static_styles: {\n                        width: <span class=\"hljs-string\">\"400px\"</span>,\n                        height: <span class=\"hljs-string\">\"30px\"</span>,\n                        border: <span class=\"hljs-string\">\"1px solid black\"</span>,\n                        position: <span class=\"hljs-string\">\"relative\"</span>\n                    }\n                },\n                template: [\n                    <span class=\"hljs-string\">\"\\r\\n\\t\\t\\t\"</span>,\n                    {\n                        type: <span class=\"hljs-string\">\"view\"</span>,\n                        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n                        container: {\n                            type: <span class=\"hljs-string\">\"Element\"</span>,\n                            tag_name: <span class=\"hljs-string\">\"div\"</span>,\n                            static_styles: {\n                                height: <span class=\"hljs-string\">\"30px\"</span>,\n                                background: <span class=\"hljs-string\">\"orange\"</span>,\n                                position: <span class=\"hljs-string\">\"absolute\"</span>\n                            },\n                            style_bindings: {\n                                width: {\n                                    evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n                                        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue() * <span class=\"hljs-number\">4</span> + <span class=\"hljs-string\">'px'</span>);\n                                    },\n                                    binds: [{property_name: <span class=\"hljs-string\">\"value\"</span>}]\n                                }\n                            }\n                        }\n                    },\n                    <span class=\"hljs-string\">\"\\r\\n\\t\\t\\t\"</span>,\n                    {\n                        type: <span class=\"hljs-string\">\"view\"</span>,\n                        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n                        argument: {\n                            evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n                                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue() + <span class=\"hljs-string\">'%'</span>);\n                            },\n                            binds: [{\n                                locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n                                locator: <span class=\"hljs-string\">\"widget\"</span>,\n                                tail: [<span class=\"hljs-string\">\"value\"</span>]\n                            }]\n                        },\n                        container: {\n                            type: <span class=\"hljs-string\">\"Element\"</span>,\n                            tag_name: <span class=\"hljs-string\">\"div\"</span>,\n                            static_styles: {\n                                width: <span class=\"hljs-string\">\"100%\"</span>,\n                                <span class=\"hljs-string\">\"text-align\"</span>: <span class=\"hljs-string\">\"center\"</span>,\n                                position: <span class=\"hljs-string\">\"absolute\"</span>,\n                                color: <span class=\"hljs-string\">\"black\"</span>,\n                                <span class=\"hljs-string\">\"font-weight\"</span>: <span class=\"hljs-string\">\"bold\"</span>\n                            }\n                        }\n                    },\n                    <span class=\"hljs-string\">\"\\r\\n\\t\\t\"</span>\n                ]\n            },\n            <span class=\"hljs-string\">\"\\r\\n\\t\"</span>\n        ],\n        properties: {value: <span class=\"hljs-number\">0</span>},\n        real_class: <span class=\"hljs-string\">\"Standard\"</span>,\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n        extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n        type: <span class=\"hljs-string\">\"widget\"</span>\n    },\n    <span class=\"hljs-string\">\"\\r\\n\"</span>\n]</pre></div></div><p>&lt;properties&gt; tag was used inside the directive - it defines <code>properties</code> config option, \nwhich is handled in constructor of the <a href=\"/www/doc.html#class=Lava.widget.Standard\">Lava.widget.Standard</a> class. If we did not set it, then &quot;width&quot;\nexpression would evaluate to &quot;NaNpx&quot; (cause <code>value</code> would be <span class=\"api-keyword\">undefined</span>).</p>\n<p>Let&#39;s make this widget reusable: for this we replace x:widget directive with x:define. They both have same format of\ninner tags, there is only one significant difference between them: while x:widget inserts config object inline, \nx:define puts it into <a href=\"/www/doc.html#object=Lava;member=widgets\">Lava#widgets</a>. You also need to add <code>title</code> to widget definition:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:define</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span> <span class=\"hljs-attribute\">title</span>=<span class=\"hljs-value\">\"MyProgressBar\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_template</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 400px; height: 30px; border: 1px solid black; position: relative\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"value * 4 + 'px'\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"height:30px; background: orange; position:absolute\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 100%;text-align: center;position: absolute;color: black;font-weight: bold;\"</span>&gt;</span>{#&gt; $widget.value + '%'}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        {value: 0}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:define</span>&gt;</span></pre></div></div><h2 id=\"using-widgets\">Using widgets</h2>\n<p>You can insert a global widget into template by it&#39;s title:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">extends</span>=<span class=\"hljs-value\">\"MyProgressBar\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"MyProgressBar\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n    extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n    type: <span class=\"hljs-string\">\"widget\"</span>\n}]</pre></div></div><p>The same syntax allows you to make any modifications to original config, or even rewrite it completely:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">extends</span>=<span class=\"hljs-value\">\"MyProgressBar\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"my_bar\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n    {value: 50}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"MyProgressBar\"</span>,\n    properties: {value: <span class=\"hljs-number\">50</span>},\n    id: <span class=\"hljs-string\">\"my_bar\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n    extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n    type: <span class=\"hljs-string\">\"widget\"</span>\n}]</pre></div></div><p>You could assign new controller, define new &lt;main_template&gt; and use many other config options, which we will learn later.\nAlso notice the <code>id</code> attribute.</p>\n<h2 id=\"define-container\">Define container</h2>\n<p>Like any view, widgets can have container. Container and main template are defined together:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:define</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span> <span class=\"hljs-attribute\">title</span>=<span class=\"hljs-value\">\"MyProgressBar\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_view</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 400px; height: 30px; border: 1px solid black; position: relative\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"value * 4 + 'px'\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"height:30px; background: orange; position:absolute\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"width: 100%;text-align: center;position: absolute;color: black;font-weight: bold;\"</span>&gt;</span>{#&gt; $widget.value + '%'}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_view</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        {value: 0}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:define</span>&gt;</span></pre></div></div><p>&lt;main_view&gt; tag replaces the &lt;main_template&gt; tag, which expects a single View config inside it.\nContainer and template are copied from view into widget config.</p>\n<p>Either one of &lt;main_view&gt; or &lt;main_template&gt; tags are allowed, \nand if one of them exists - it must be the first (topmost) tag in widget definition.</p>\n<p>Final example:\n<iframe style=\"height: 26em; width: 100%\" src=\"http://embed.plnkr.co/2boMQw/preview\"></iframe>\n<i><a href=\"/www/demos/tutorials/StandardSyntax.html\">Alternative link</a></i></p>\n<h2 id=\"widget-includes\">Widget includes</h2>\n<p>&quot;include&quot; is a <i>named template</i> from widget. You define them with &lt;include&gt; tag in widget definition:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:define</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span> <span class=\"hljs-attribute\">title</span>=<span class=\"hljs-value\">\"MyPanel\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_template</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"my-panel\"</span>&gt;</span>\n            {&gt; $widget.header}\n            {&gt; $widget.content}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">include</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"header\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"panel-header\"</span>&gt;</span>{#&gt; $widget.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">include</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">include</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"content\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"panel-content\"</span>&gt;</span>{#&gt; $widget.content}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">include</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:define</span>&gt;</span></pre></div></div><p>Content of &lt;include&gt; tag is parsed like any template, this means that inside there can be other views, \nwidgets and includes. Includes are inserted into template with the following construct: <code>{&gt; ...}</code>\n(same as Expression views, but without &quot;#&quot; or &quot;$&quot;).</p>\n<p>How includes work: <b>at run time</b> include construct is replaced with exact template.\nYou can replace them by hands (copy-and-paste), and you will get the same result:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-comment\">&lt;!-- Result is equivalent to previous example --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:define</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"Standard\"</span> <span class=\"hljs-attribute\">title</span>=<span class=\"hljs-value\">\"MyPanel2\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">main_template</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"my-panel\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"panel-header\"</span>&gt;</span>{#&gt; $widget.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"panel-content\"</span>&gt;</span>{#&gt; $widget.content}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">main_template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:define</span>&gt;</span></pre></div></div><p>Includes can be overwritten in inherited widgets. In previous lessons you have seen CollapsiblePanel widget, \nwritten with sugar syntax; here is the same example in standard syntax:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">extends</span>=<span class=\"hljs-value\">\"CollapsiblePanel\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">include</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"title\"</span>&gt;</span>The title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">include</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">include</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"content\"</span>&gt;</span>The content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">include</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"CollapsiblePanel\"</span>,\n    includes: {\n        title: [<span class=\"hljs-string\">\"The title\"</span>],\n        content: [<span class=\"hljs-string\">\"The content\"</span>]\n    },\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n    extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n    type: <span class=\"hljs-string\">\"widget\"</span>\n}]</pre></div></div><p>Include can be bubbling, like property: <code>{&gt; title}</code> - this will find the first parent which has <span class=\"api-string\">&quot;title&quot;</span> \ninclude and insert it&#39;s content. Once again - you should prefer targeted includes over bubbling.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}