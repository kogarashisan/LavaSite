{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"using-classes\">Using classes</h1>\n<p>Lava framework features extremely fast and convenient class system. Let&#39;s look at the structure of a class.\nYou can run this example in console:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">'Lava.user.MyClass'</span>,\n{\n    Extends: <span class=\"hljs-string\">'Lava.mixin.Properties'</span>,\n\n    <span class=\"hljs-comment\">// By default, each class owns it's own copy of all objects and arrays from class body.</span>\n    <span class=\"hljs-comment\">// \"Shared\" directive makes objects shared between class instances.</span>\n    Shared: <span class=\"hljs-string\">'shared_object'</span>,\n    <span class=\"hljs-comment\">// this object will be shared across all class instances</span>\n    shared_object: {\n        counter: <span class=\"hljs-number\">0</span>\n    },\n\n    <span class=\"hljs-comment\">// example instance properties</span>\n    guid: <span class=\"hljs-number\">0</span>,\n    example_array: [<span class=\"hljs-string\">'test'</span>],\n    example_object: {},\n\n    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(properties)</span> {</span>\n        <span class=\"hljs-comment\">// just an example</span>\n        <span class=\"hljs-keyword\">this</span>.guid = Lava.guid++;\n        <span class=\"hljs-comment\">// call to parent's init() method</span>\n        <span class=\"hljs-keyword\">this</span>.Properties$init(properties);\n    },\n\n    incrementSharedCounter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n        <span class=\"hljs-keyword\">this</span>.shared_object.counter ++;\n    }\n});</pre></div></div></div><p>Quick facts about this class:</p>\n<ul>\n<li>a constructor was generated for it, so you can run <code>new Lava.user.MyClass()</code> to create it&#39;s instance</li>\n<li>it extends <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a>, so it inherits all it&#39;s methods and properties, like <code>get()</code> and <code>set()</code></li>\n<li>It has <code>init()</code> method, which receives the arguments, passed to constructor. \nFor example: <code>new Lava.user.MyClass({test: true})</code> - argument will be passed to <code>init()</code></li>\n</ul>\n<p>Quick exercise: execute the above example in console and type <code>Lava.user.MyClass</code> to see the source code of \nthe generated constructor. Then explore <code>Lava.user.MyClass.prototype</code>.</p>\n<p>Using the generated class (you can execute this example line-by-line in console):</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-comment\">// instance created with arguments for init() method</span>\n<span class=\"hljs-keyword\">var</span> instance1 = <span class=\"hljs-keyword\">new</span> Lava.user.MyClass({property: <span class=\"hljs-string\">'value'</span>});\n<span class=\"hljs-keyword\">var</span> instance2 = <span class=\"hljs-keyword\">new</span> Lava.user.MyClass();\n\n <span class=\"hljs-comment\">// call inherited method from Properties</span>\ninstance1.set(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'value'</span>);\n\n<span class=\"hljs-comment\">// demonstrate that arrays are not shared</span>\ninstance1.example_array.push(<span class=\"hljs-string\">'test2'</span>);\ninstance1.example_array; <span class=\"hljs-comment\">// ['test', 'test2']</span>\ninstance2.example_array; <span class=\"hljs-comment\">// ['test']</span>\n\n<span class=\"hljs-comment\">// demonstrate, that Shared directive works</span>\ninstance1.incrementSharedCounter();\ninstance2.shared_object.counter; <span class=\"hljs-comment\">// 1</span></pre></div></div></div><h2 id=\"explanation\">Explanation</h2>\n<p><code>Lava.define</code> internally calls <code>Lava.ClassManager</code>, which creates class constructors. \nYou can see generated source code by typing <code>Lava.user.MyClass</code> in console.\nGenerated constructor automatically calls the <code>init()</code> method, with all arguments, received by constructor.</p>\n<p>All instance variables, even arrays and objects - are not shared between class instances. In this case each class instance\nhas it&#39;s own copy of <span class=\"api-var\">guid</span>, <span class=\"api-var\">example_object</span> and <span class=\"api-var\">example_array</span>. You can make an object shared with the\n&quot;Shared&quot; directive (currently, works only for objects, not for arrays).</p>\n<h2 id=\"calling-parent-methods\">Calling parent methods</h2>\n<p>When a method is overridden in inherited class - method from parent is renamed.\nNew name will get parent&#39;s name and dollar sign (&quot;$&quot;) added to it.</p>\n<p>For example, if you inherit from <code>Lava.mixin.Properties</code> and override the <code>init()</code> method -\nthan parent&#39;s method will be called &quot;Properties$init&quot;. If you inherit from <code>Lava.widget.Standard</code> -\nthan it will be &quot;Standard$init&quot;.</p>\n<h2 id=\"see-also\">See also</h2>\n<p>For in-depth explanation of all ClassManager features, see the corresponding <a href=\"/www/doc.html#reference=Classes\">reference</a>.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}