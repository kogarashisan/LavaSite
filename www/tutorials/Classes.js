{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"using-classes\">Using classes</h1>\n<p>Lava framework features extremely fast and convenient class system. Let&#39;s look at the structure of a class.\nYou can run this example in console:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.ClassManager.define(\n<span class=\"hljs-string\">'Lava.user.MyClass'</span>,\n{\n    Extends: <span class=\"hljs-string\">'Lava.mixin.Properties'</span>,\n\n    Shared: <span class=\"hljs-string\">'shared_object'</span>,\n    <span class=\"hljs-comment\">// this object will be shared across all class instances</span>\n    shared_object: {\n        counter: <span class=\"hljs-number\">0</span>\n    },\n\n    guid: <span class=\"hljs-number\">0</span>,\n    example_array: [<span class=\"hljs-string\">'test'</span>],\n    example_object: {},\n\n    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(properties)</span> {</span>\n        <span class=\"hljs-comment\">// just as example</span>\n        <span class=\"hljs-keyword\">this</span>.guid = Lava.guid++;\n        <span class=\"hljs-comment\">// call to parent's init() method</span>\n        <span class=\"hljs-keyword\">this</span>.Properties$init(properties);\n    },\n\n    incrementSharedCounter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n        <span class=\"hljs-keyword\">this</span>.shared_object.counter ++;\n    }\n});</pre></div></div><p>Using the generated class:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-comment\">// instance created with arguments for init() method</span>\n<span class=\"hljs-keyword\">var</span> instance1 = <span class=\"hljs-keyword\">new</span> Lava.user.MyClass({property: <span class=\"hljs-string\">'value'</span>});\n<span class=\"hljs-keyword\">var</span> instance2 = <span class=\"hljs-keyword\">new</span> Lava.user.MyClass();\n\n <span class=\"hljs-comment\">// call inherited method from Properties</span>\ninstance1.set(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'value'</span>);\n\n<span class=\"hljs-comment\">// demonstrate that arrays are not shared</span>\ninstance1.example_array.push(<span class=\"hljs-string\">'test2'</span>);\ninstance1.example_array; <span class=\"hljs-comment\">// ['test', 'test2']</span>\ninstance2.example_array; <span class=\"hljs-comment\">// ['test']</span>\n\n<span class=\"hljs-comment\">// demonstrate, that Shared directive works</span>\ninstance1.incrementSharedCounter();\ninstance2.shared_object.counter; <span class=\"hljs-comment\">// 1</span></pre></div></div><h2 id=\"explanation\">Explanation</h2>\n<p>First of all, ClassManager has created a constructor for you. You can look at it&#39;s source code by typing\n<span class=\"api-string\">Lava.user.MyClass</span> in console. When you create a class instance - it&#39;s <code>init()</code> method is automatically called\nwill all the arguments you have passed to generated constructor.</p>\n<p>Our class extends <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a> and inherits all it&#39;s properties and methods, so you can\nuse <code>get()</code> and <code>set()</code> methods on these objects.</p>\n<p>All instance variables, even arrays and objects, are not shared between class instances. In this case each class instance\nhas it&#39;s own copy of <span class=\"api-var\">example_object</span> and <span class=\"api-var\">example_array</span>. You can make an object shared with the\n&quot;Shared&quot; directive (currently, works only for objects, not for arrays).</p>\n<h2 id=\"calling-parent-methods\">Calling parent methods</h2>\n<p>When a method is overridden in inherited class - method from parent is renamed.\nNew name will get parent&#39;s name and dollar sign (&quot;$&quot;) added to it.\nFor example, if you inherit from Lava.mixin.Properties and override the <code>init()</code> method -\nthan parent&#39;s method will be called &quot;Properties$init&quot;. If you inherit from Lava.widget.Standard -\nthan it will be &quot;Standard$init&quot;.</p>\n"],
	container: {
		"class": "Element",
		tag_name: "div"
	}
}