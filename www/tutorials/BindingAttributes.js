{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"the-view-class\">The View class</h1>\n<p>The fourth view in Lava is called simply a &quot;view&quot; (<a href=\"/www/doc.html#class=Lava.view.View\">Lava.view.View</a>):</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\">{#view()}\n    Hello world\n{/view}</pre></div></div></div><p>It does not have an argument and should always be written with empty braces. \nBy itself, this class is totally useless, and just wraps it&#39;s template.</p>\n<p>But this view can be given a Morph container - this will allow to update views without container inside it:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\">{$view()}\n    {#&gt; something} and {#&gt; otherthing}\n{/view}</pre></div></div></div><p>And most often you will give this view an Element container:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span>&gt;</span>\n    {$view()}\n        Hello world\n    {/view}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div></div><p>This form has special syntax equivalent:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\n  Hello world\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[\n  <span class=\"hljs-string\">\"\\r\\n\"</span>,\n  {\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    container: {\n      type: <span class=\"hljs-string\">\"Element\"</span>,\n      tag_name: <span class=\"hljs-string\">\"div\"</span>\n    },\n    template: [<span class=\"hljs-string\">\"\\r\\n\\tHello world\\r\\n\"</span>]\n  },\n  <span class=\"hljs-string\">\"\\r\\n\"</span>\n]</pre></div></div></div><p>This will create a View with an Element container.</p>\n<p>Why this is so important: cause container&#39;s properties, styles and classes can be bound to expressions.\nContainers can also delegate events, like &quot;click&quot; or &quot;mouseover&quot;, so you will use this form often.</p>\n<h2 id=\"elements-in-templates\">Elements in templates</h2>\n<p>When Lava parses templates - all elements without control attributes are converted back to strings, for example:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span>&gt;</span>{#&gt; your_name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[\n  <span class=\"hljs-string\">\"\\r\\n\"</span>,\n  {\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    container: {\n      type: <span class=\"hljs-string\">\"Element\"</span>,\n      tag_name: <span class=\"hljs-string\">\"div\"</span>\n    },\n    template: [\n      <span class=\"hljs-string\">\"\\r\\n\\t&lt;span&gt;\"</span>,\n      {\n        type: <span class=\"hljs-string\">\"view\"</span>,\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n        argument: {\n          evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n          },\n          flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n          binds: [{property_name: <span class=\"hljs-string\">\"your_name\"</span>}]\n        }\n      },\n      <span class=\"hljs-string\">\"&lt;/span&gt;\\r\\n\"</span>\n    ]\n  },\n  <span class=\"hljs-string\">\"\\r\\n\"</span>\n]</pre></div></div></div><p>&lt;span&gt; tag will be converted to string, and Expression view inside it will not be able to use it for update:\nwhen <code>your_name</code> changes - it will update parent&#39;s &lt;div&gt; tag. In this case it may be better to convert &lt;span&gt;\ninto container for the Expression view:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span>&gt;</span>{#&gt; your_name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[\n  <span class=\"hljs-string\">\"\\r\\n\"</span>,\n  {\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    container: {\n      type: <span class=\"hljs-string\">\"Element\"</span>,\n      tag_name: <span class=\"hljs-string\">\"div\"</span>\n    },\n    template: [\n      <span class=\"hljs-string\">\"\\r\\n\\t\"</span>,\n      {\n        type: <span class=\"hljs-string\">\"view\"</span>,\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n        argument: {\n          evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n          },\n          flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n          binds: [{property_name: <span class=\"hljs-string\">\"your_name\"</span>}]\n        },\n        container: {\n          type: <span class=\"hljs-string\">\"Element\"</span>,\n          tag_name: <span class=\"hljs-string\">\"span\"</span>\n        }\n      },\n      <span class=\"hljs-string\">\"\\r\\n\"</span>\n    ]\n  },\n  <span class=\"hljs-string\">\"\\r\\n\"</span>\n]</pre></div></div></div><h2 id=\"element-bindings\">Element bindings</h2>\n<p>You can bind any element&#39;s properties to expressions, for example:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:bind:src</span>=<span class=\"hljs-value\">\"'/www/images/' + image_name\"</span> /&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[\n  <span class=\"hljs-string\">\"\\r\\n\"</span>,\n  {\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    container: {\n      type: <span class=\"hljs-string\">\"Element\"</span>,\n      tag_name: <span class=\"hljs-string\">\"img\"</span>,\n      property_bindings: {\n        src: {\n          evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-string\">'/www/images/'</span> + <span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n          },\n          binds: [{property_name: <span class=\"hljs-string\">\"image_name\"</span>}]\n        }\n      }\n    }\n  },\n  <span class=\"hljs-string\">\"\\r\\n\"</span>\n]</pre></div></div></div><p>Here we bind <code>src</code> property to an expression. You are not limited when writing expressions for attributes -\nyou can use any variables, modifiers (function calls) and operators, like in any other expression.</p>\n<p>Classes and styles are bound separately.</p>\n<p>You bind styles with <code>x:style:&lt;name&gt;</code> syntax. <b>And if you have units, like &quot;px&quot; - \nyou should manually add it to the style value.</b></p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-comment\">&lt;!-- \nexample volume bar. \nIt expects \"volume\" property to be defined somewhere in parent views or widgets \n--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"volume * 2 + 'px'\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"volume-bar\"</span>&gt;</span>\n    {#&gt; volume}%\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div></div><p>Class binding accepts multiple expressions, each of them can return a string with any number of CSS class names:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:classes</span>=<span class=\"hljs-value\">\"is_open ? 'open' : ''; \n    is_highlighted ? 'box-highlighted box-white' : 'box-gray'\"</span>&gt;</span>\n...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div></div><p>Here are two semicolon-separated expressions: first returns either &#39;open&#39; class or empty string. Second expression\nreturns either two classes or one, depending on <code>is_highlighted</code> variable, which is taken somewhere from view parents.</p>\n<p>Expressions of <code>x:classes</code> binding must not return <span class=\"api-keyword\">null</span> - you should return empty string when you don&#39;t \nneed to apply any classes.</p>\n<h2 id=\"using-bindings\">Using bindings</h2>\n<p>You can:</p>\n<ul>\n<li>use newlines in expressions</li>\n<li>use bindings on view containers (elements with <code>x:container</code>)</li>\n<li>have bound and unbound styles and classes at the same time</li>\n</ul>\n<p>For example, if you have an array of objects with <span class=\"api-var\">href</span> and <span class=\"api-var\">title</span> properties,\nthat&#39;s how you can render them:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\">{#foreach(links) as=link}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:bind:href</span>=<span class=\"hljs-value\">\"link.href\"</span>&gt;</span>\n        {#&gt; link.title}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n{/foreach}</pre></div></div></div><p>Another example - an element with bound and static styles:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"volume * 2 + 'px'\"</span> <span class=\"hljs-attribute\">style</span>=<span class=\"hljs-value\">\"height: 20px; background: blue\"</span>&gt;</span>\n    {#&gt; volume}%\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div></div><p>What you should not do: if you have elements, controlled by the framework - you should not edit their properties \nfrom outside of the framework. Due to nature of Lava templates - properties can be refreshed at any time, \nso you can lose your changes. You can change properties manually, but you should respect the template lifecycle and use\n<a href=\"/www/doc.html#class=Lava.view.container.Element\">Element container&#39;s API</a>.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}