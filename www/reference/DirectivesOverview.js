{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"directives\">Directives</h1>\n<p>Directives are tags from &quot;x&quot; namespace, like &lt;x:define&gt;.</p>\n<p>In Lava framework, templates are not compiled into JavaScript functions,\nbut instead <a href=\"/www/doc.html#object=Lava.TemplateParser;member=parse\">TemplateParser#parse</a> produces configs for classes from &quot;Lava.view&quot; namespace.\nDirectives provide syntax for modifying view and widget configs.</p>\n<table class=\"api-member-table\"><thead><tr><td>Directive</td><td>Result</td><td>Is view directive</td><td>Widget only</td></tr></thead><tbody><tr><td><a href=\"/www/doc.html#reference=Directives.define\">define</a></td><td></td><td>Outside</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.define_resources\">define_resources</a></td><td></td><td>Outside</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.widget\">widget</a></td><td>Yes</td><td></td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.static_value\">static_value</a></td><td>Yes</td><td></td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.static_eval\">static_eval</a></td><td>Yes</td><td></td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.attach_directives\">attach_directives</a></td><td>Yes</td><td></td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.assign\">assign</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.roles\">roles</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.container_config\">container_config</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.refresher\">refresher</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.option\">option</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.options\">options</a></td><td></td><td>Yes</td><td></td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.bind\">bind</a></td><td></td><td>Yes</td><td>Yes</td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.property\">property</a></td><td></td><td>Yes</td><td>Yes</td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.properties\">properties</a></td><td></td><td>Yes</td><td>Yes</td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.property_string\">property_string</a></td><td></td><td>Yes</td><td>Yes</td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.resources\">resources</a></td><td></td><td>Yes</td><td>Yes</td></tr><tr><td><a href=\"/www/doc.html#reference=Directives.default_events\">default_events</a></td><td></td><td>Yes</td><td>Yes</td></tr></tbody></table>\n\n<h2 id=\"view-directives\">View directives</h2>\n<p>Directives that modify view&#39;s configs are forced to appear on the top of their parent view,\nbefore any other template content.\nThis is done to maintain good codestyle among LiquidLava developers. For example:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><pre class=\"lava-code-content hljs xml\">{#view()}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:option</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"test_option\"</span>&gt;</span>\"option_value\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:option</span>&gt;</span>\n    This is content\n{/view}</pre></div></div><p>You cannot move &lt;x:option&gt; directive after any text inside the view - otherwise you will get an exception.\nAlso, you cannot insert any directive, that produces result (like &lt;x:widget&gt;) before it.</p>\n<p>Special cases: x:define and x:define_resources directives must be outside of view or widget configs.\nYou must always put them at the root of your templates.</p>\n<h2 id=\"order-of-directives\">Order of directives</h2>\n<p>Order of directives matters: for example, you can use &lt;x:option&gt; after &lt;x:options&gt;, but not vice versa.\nReason: &lt;x:options&gt; directive overwrites the whole <a href=\"/www/doc.html#object=Support;member=_cView.options\">_cView#options</a> object, while &lt;x:option&gt;\nadds only one property to that object.</p>\n<p>The same rule applies to &lt;x:option&gt; and &lt;x:options&gt; tags in widget definition. In DEBUG mode you will\nget an error in case of wrong order.</p>\n<h2 id=\"directive-results\">Directive results</h2>\n<p>Most directives does not yield a result, instead they modify configs of their widgets. Some special directives,\nlike x:define and x:define_resource - modify global data from Lava.widgets property. And some of them, like x:widget -\nreturn template items (in this case - a widget config).</p>\n<p>All directives that can be applied to views (except x:refresher) - can also be applied to widgets.</p>\n<h2 id=\"architecture\">Architecture</h2>\n<p><a href=\"/www/doc.html#object=Lava.parsers.Directives;member=processDirective\">Directives#processDirective</a> is the method you can manually call to apply directives to a view&#39;s config\nand get their results.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}