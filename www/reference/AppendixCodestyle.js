{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"appendix-b-code-style-notes\">Appendix B - Code style notes</h1>\n<h2 id=\"private-properties\">Private properties</h2>\n<p><i>If name of a property starts with underscore - it&#39;s considered private.</i></p>\n<p>Naturally, you must not reference variable&#39;s private properties from outside of the variable: \nsuch behaviour is not natural, and it&#39;s prohibited by most of strong-typed and even many scripting languages. \n<b>Object&#39;s private properties and methods can be referenced only by own object&#39;s methods.</b></p>\n<p>However, there is one exception for JavaScript - the <span class=\"api-var\">self</span> variable:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(\n<span class=\"hljs-string\">'Lava.user.MyClass'</span>,\n{\n    _callback: <span class=\"hljs-literal\">null</span>,\n\n    init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n\n        <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n\n        <span class=\"hljs-keyword\">this</span>._callback = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            self._doSomething();\n        };\n\n    }\n\n...</pre></div></div><p>With such pattern - private variables stay private. <code>_doSomething</code> method is still referenced by the class, \nfrom a method that belongs to that class. This pattern is allowed as exception, due to features of JavaScript language.</p>\n<p>This is strictly prohibited:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> Lava.user.MyClass();\n<span class=\"hljs-comment\">// NEVER DO IT!</span>\ninstance._callback = <span class=\"hljs-literal\">null</span>; \ninstance._doSomething();</pre></div></div><p>Some widget classes have private widget properties (name of property starts with underscore). \nYou must not access them from outside of the widget, just like other variables:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> tabs_widget = Lava.view_manager.getViewById(<span class=\"hljs-string\">\"my_tabs\"</span>);\n<span class=\"hljs-comment\">// NEVER DO IT!</span>\ntabs_widget.get(<span class=\"hljs-string\">\"_tabs\"</span>);\n <span class=\"hljs-comment\">// most likely, this will break the Tabs widget</span>\ntabs_widget.set(<span class=\"hljs-string\">\"_tabs\"</span>, <span class=\"hljs-keyword\">new</span> Lava.system.Enumerable());</pre></div></div>"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}