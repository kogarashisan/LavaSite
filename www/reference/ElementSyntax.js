var page_json = {
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"element-syntax-for-view-containers\">Element syntax for view containers</h1>\n<p>Attributes from &quot;x:&quot; namespace are called &quot;control attributes&quot; - they allow you to define Element containers for views,\nand also bind their styles and properties.</p>\n<p>Every HTML element with control attributes must have either x:widget or x:type attribute defined.\nElement with <code>x:type=&quot;view&quot;</code> creates a view with the <a href=\"/www/doc/class/Lava.view.View.html\">Lava.view.View</a> class and an <a href=\"/www/doc/class/Lava.view.container.Element.html\">Lava.view.container.Element</a> container.</p>\n<p>Example: define a view with &lt;div&gt; container</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><h2 id=\"binding-properties\">Binding properties</h2>\n<p>You can bind element&#39;s properties with the following syntax:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:bind:property_name=\"&lt;expression&gt;\"</pre></div></div></div><p>Example:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:bind:src</span>=<span class=\"hljs-value\">\"$widget.image_src\"</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"img\"</span>,\n    property_bindings: {\n      src: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{\n          locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n          locator: <span class=\"hljs-string\">\"widget\"</span>,\n          tail: [<span class=\"hljs-string\">\"image_src\"</span>]\n        }]\n      }\n    }\n  }\n}]</pre></div></div></div><h2 id=\"binding-styles\">Binding styles</h2>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:style:style_name=\"&lt;expression&gt;\"</pre></div></div></div><div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:width</span>=<span class=\"hljs-value\">\"$widget.rectangle_width\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:style:height</span>=<span class=\"hljs-value\">\"$widget.rectangle_height\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>,\n    style_bindings: {\n      width: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{\n          locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n          locator: <span class=\"hljs-string\">\"widget\"</span>,\n          tail: [<span class=\"hljs-string\">\"rectangle_width\"</span>]\n        }]\n      },\n      height: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{\n          locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n          locator: <span class=\"hljs-string\">\"widget\"</span>,\n          tail: [<span class=\"hljs-string\">\"rectangle_height\"</span>]\n        }]\n      }\n    }\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><h2 id=\"binding-classes\">Binding classes</h2>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:class=\"&lt;expressions&gt;\"</pre></div></div></div><div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:classes</span>=<span class=\"hljs-value\">\"$widget.is_active ? 'active' : ''; #app.additional_classes\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>,\n    class_bindings: {\n      <span class=\"hljs-string\">\"0\"</span>: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue() ? <span class=\"hljs-string\">'active'</span> : <span class=\"hljs-string\">''</span>);\n        },\n        binds: [{\n          locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n          locator: <span class=\"hljs-string\">\"widget\"</span>,\n          tail: [<span class=\"hljs-string\">\"is_active\"</span>]\n        }]\n      },\n      <span class=\"hljs-string\">\"1\"</span>: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{\n          locator_type: <span class=\"hljs-string\">\"Id\"</span>,\n          locator: <span class=\"hljs-string\">\"app\"</span>,\n          tail: [<span class=\"hljs-string\">\"additional_classes\"</span>]\n        }]\n      }\n    }\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><p>You can write several expressions, separated by semicolon.</p>\n<h2 id=\"delegating-events\">Delegating events</h2>\n<p>Syntax:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:event:event_name=\"&lt;targets&gt;\"</pre></div></div></div><p>Example:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:event:click</span>=<span class=\"hljs-value\">\"$widget.my_button_click(1,'test'); #app.my_button_click\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>,\n    events: {\n      click: [\n        {\n          locator_type: <span class=\"hljs-string\">\"Id\"</span>,\n          locator: <span class=\"hljs-string\">\"app\"</span>,\n          name: <span class=\"hljs-string\">\"my_button_click\"</span>,\n          <span class=\"hljs-built_in\">arguments</span>: [\n            {\n              type: <span class=\"hljs-number\">1</span>,\n              data: <span class=\"hljs-number\">1</span>\n            },\n            {\n              type: <span class=\"hljs-number\">1</span>,\n              data: <span class=\"hljs-string\">\"test\"</span>\n            }\n          ]\n        },\n        {\n          locator_type: <span class=\"hljs-string\">\"Id\"</span>,\n          locator: <span class=\"hljs-string\">\"app\"</span>,\n          name: <span class=\"hljs-string\">\"my_button_click\"</span>,\n          <span class=\"hljs-built_in\">arguments</span>: [\n            {\n              type: <span class=\"hljs-number\">1</span>,\n              data: <span class=\"hljs-number\">1</span>\n            },\n            {\n              type: <span class=\"hljs-number\">1</span>,\n              data: <span class=\"hljs-string\">\"test\"</span>\n            }\n          ]\n        }\n      ]\n    }\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><p>Note, that you can delegate one event to multiple targets.</p>\n<h2 id=\"custom-container-class\">Custom container class</h2>\n<p>By default, all containers will have <a href=\"/www/doc/class/Lava.view.container.Element.html\">Lava.view.container.Element</a> class,\nbut you can also supply a custom class for them:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:container_class=\"&lt;class_name&gt;\"</pre></div></div></div><div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:container_class</span>=<span class=\"hljs-value\">\"MyElementContainer\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"MyElementContainer\"</span>\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><p>See also: <a href=\"/www/doc/reference/Directives.container_config.html\">container_config</a> directive.</p>\n<h2 id=\"setting-view-options\">Setting view options</h2>\n<p>You can pass string options to the view. May be usable for your own view classes.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:options:option_name=\"&lt;string&gt;\"</pre></div></div></div><div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:options:option_one</span>=<span class=\"hljs-value\">\"value 1\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:options:option_two</span>=<span class=\"hljs-value\">\"value 2\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>\n  },\n  options: {\n    option_one: <span class=\"hljs-string\">\"value 1\"</span>,\n    option_two: <span class=\"hljs-string\">\"value 2\"</span>\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><h2 id=\"x-widget-attribute\">x:widget attribute</h2>\n<p>You can create an inline widget with custom element container.\nIf widget already has a container - than existing one will be replaced.\nCertainly, you should know what you are doing - you can break the widget, if it depends on it&#39;s container.</p>\n<p>DropDown widget does not have a container, so it may be used this way:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"dropdown\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:widget</span>=<span class=\"hljs-value\">\"DropDown\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"#\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"dropdown-toggle\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:roles</span>=<span class=\"hljs-value\">\"$dropdown.trigger\"</span>&gt;</span>\n    Click me!\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"dropdown-menu\"</span>&gt;</span>\n    And I will open\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"widget\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n  extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n  <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"DropDown\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"li\"</span>,\n    static_classes: [<span class=\"hljs-string\">\"dropdown\"</span>]\n  },\n  template: [\n    <span class=\"hljs-string\">\"\\r\\n\\t\"</span>,\n    {\n      type: <span class=\"hljs-string\">\"view\"</span>,\n      <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n      container: {\n        type: <span class=\"hljs-string\">\"Element\"</span>,\n        tag_name: <span class=\"hljs-string\">\"a\"</span>,\n        static_classes: [<span class=\"hljs-string\">\"dropdown-toggle\"</span>],\n        static_properties: {href: <span class=\"hljs-string\">\"#\"</span>}\n      },\n      roles: [{\n        locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n        locator: <span class=\"hljs-string\">\"dropdown\"</span>,\n        name: <span class=\"hljs-string\">\"trigger\"</span>\n      }],\n      template: [<span class=\"hljs-string\">\"\\r\\n\\t\\tClick me!\\r\\n\\t\"</span>]\n    },\n    <span class=\"hljs-string\">\"\\r\\n\\t&lt;ul class=\\\"dropdown-menu\\\"&gt;\\r\\n\\t\\tAnd I will open\\r\\n\\t&lt;/ul&gt;\\r\\n\"</span>\n  ]\n}]</pre></div></div></div><h2 id=\"common-attributes\">Common attributes</h2>\n<p>You can also supply the &quot;label&quot; and &quot;roles&quot; attributes for the view. Syntax:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">x:roles=&lt;targets&gt;</pre></div></div></div><div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:label</span>=<span class=\"hljs-value\">\"my_view\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:roles</span>=<span class=\"hljs-value\">\"$widget.my_view(1, 'test'); #app.my_view\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>\n  },\n  label: <span class=\"hljs-string\">\"my_view\"</span>,\n  roles: [\n    {\n      locator_type: <span class=\"hljs-string\">\"Id\"</span>,\n      locator: <span class=\"hljs-string\">\"app\"</span>,\n      name: <span class=\"hljs-string\">\"my_view\"</span>,\n      <span class=\"hljs-built_in\">arguments</span>: [\n        {\n          type: <span class=\"hljs-number\">1</span>,\n          data: <span class=\"hljs-number\">1</span>\n        },\n        {\n          type: <span class=\"hljs-number\">1</span>,\n          data: <span class=\"hljs-string\">\"test\"</span>\n        }\n      ]\n    },\n    {\n      locator_type: <span class=\"hljs-string\">\"Id\"</span>,\n      locator: <span class=\"hljs-string\">\"app\"</span>,\n      name: <span class=\"hljs-string\">\"my_view\"</span>,\n      <span class=\"hljs-built_in\">arguments</span>: [\n        {\n          type: <span class=\"hljs-number\">1</span>,\n          data: <span class=\"hljs-number\">1</span>\n        },\n        {\n          type: <span class=\"hljs-number\">1</span>,\n          data: <span class=\"hljs-string\">\"test\"</span>\n        }\n      ]\n    }\n  ],\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div></div><p>Element container may also have <b>x:resource_id</b> attribute.\nSee reference for <a href=\"/www/doc/reference/Resources.html\">Resources and localization</a>.</p>\n<h2 id=\"wrapping-views\">Wrapping views</h2>\n<p>You can set an Element container to views with <code>x:type=&quot;container&quot;</code> attribute:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span>&gt;</span>\n  {#if(true)}\n    Hello world!\n  {/if}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"If\"</span>,\n  argument: {\n    evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-literal\">true</span>);\n    },\n    flags: {\n      isStatic: <span class=\"hljs-literal\">true</span>,\n      isLiteral: <span class=\"hljs-literal\">true</span>\n    }\n  },\n  template: [<span class=\"hljs-string\">\"\\r\\n\\t\\tHello world!\\r\\n\\t\"</span>],\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>\n  }\n}]</pre></div></div></div><p>Wrapping is done at the time of compilation (in <a href=\"/www/doc/object/Lava.parsers.Common.html#member=compileTemplate\">Common#compileTemplate</a>).\nFramework creates an Element container config from the tag, asserts that there is only one view inside,\nand assigns container config to that view.</p>\n<p>View must be container-less (&quot;#&quot;, not &quot;$&quot;). And of course, you can use any kind of properties and bindings on container.</p>\n<p>Several control attributes are forbidden either on container or wrapped view:</p>\n<ul>\n<li>x:options, x:roles and x:label - they belong to view, so must be moved to view (either via hash option, or directive)</li>\n<li><code>id</code> also belongs to view, but it must be moved to container for code-style reasons</li>\n</ul>\n<p>Real-life example:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:bind:href</span>=<span class=\"hljs-value\">\"href\"</span>&gt;</span>\n  {#&gt; title}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n  argument: {\n    evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n    },\n    flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n    binds: [{property_name: <span class=\"hljs-string\">\"title\"</span>}]\n  },\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"a\"</span>,\n    property_bindings: {\n      href: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n          <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{property_name: <span class=\"hljs-string\">\"href\"</span>}]\n      }\n    }\n  }\n}]</pre></div></div></div><p>This is the simplest way to bind both <code>href</code> attribute and link content: if you placed <code>x:type=&quot;view&quot;</code>\ninstead of &quot;container&quot; - there would be unnecessary view created.</p>\n<h2 id=\"remarks\">Remarks</h2>\n<p>First, you can have static and bound attributes at the same time, but one given attribute name cannot have static value \nand be bound at the same time. The same for styles. \nYou can also have a static <code>class</code> attribute (classes, that are always present) and bound <code>x:classes</code> at the same time.</p>\n<p>Second: <code>id</code> attribute belongs to view, not to the DOM element. You can create a static element with an <code>id</code> attribute:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"test\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div></div><p>It will preserve all it&#39;s attributes after rendering, so you will be able to get it by <code>id</code>. \nBut when you create a view (or container) with id, then DOM element will be given random system id instead:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"test\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"view\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n  container: {\n    type: <span class=\"hljs-string\">\"Element\"</span>,\n    tag_name: <span class=\"hljs-string\">\"div\"</span>\n  },\n  id: <span class=\"hljs-string\">\"test\"</span>\n}]</pre></div></div></div><p>This will render as: <code>&lt;div id=&quot;e123&quot;&gt;&lt;/div&gt;</code> (&quot;123&quot; is some random number).\nIn this case you can get it from ViewManager:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> element = Lava.view_manager.getViewById(<span class=\"hljs-string\">\"test\"</span>).getContainer().getDOMElement();</pre></div></div></div><p>Of course, <code>getViewById</code> will return the view only if it&#39;s already created,\nand <code>getDOMElement</code> will return the element only when view is in DOM.</p>\n<h2 id=\"see-also\">See also</h2>\n<p><code>x:type=&quot;static&quot;</code> and <code>resource_id</code> attributes are described in <a href=\"/www/doc/reference/Resources.html\">Resources and localization</a> reference.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}