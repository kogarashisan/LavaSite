{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"data-orm-layer\">Data(ORM) layer</h1>\n<p>Note: data layer is still in development, but even in current state it&#39;s powerful and worth using.</p>\n<p>Data layer includes:</p>\n<ul>\n<li><a href=\"/www/doc.html#class=Lava.data.Module\">Modules</a> - analog of server-side database table</li>\n<li>Each module has <a href=\"/www/doc.html#class=Lava.data.Record\">Records</a> - represents a row in that table</li>\n<li>Records have <a href=\"/www/doc.html#class=Lava.data.field.Abstract\">Fields</a></li>\n</ul>\n<p>You can create modules and records with custom functionality, as well as custom fields.\nModules can be referenced by their name, all module instances are global.</p>\n<h2 id=\"advanced-usage-example\">Advanced usage example</h2>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-comment\">// configs are global</span>\nLava.schema.modules[<span class=\"hljs-string\">'DemoFiles'</span>] = {\n    fields: {\n        <span class=\"hljs-comment\">// holds a unique integer from server-side table</span>\n        id: {type: <span class=\"hljs-string\">'Id'</span>},\n        title: {type: <span class=\"hljs-string\">'Basic'</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-string\">''</span>},\n        <span class=\"hljs-comment\">// Virtual field. References a record from another module.</span>\n        <span class=\"hljs-comment\">// Id of that record is stored in \"directory_id\" field</span>\n        directory: {type: <span class=\"hljs-string\">'Record'</span>, module: <span class=\"hljs-string\">'DemoFolders'</span>, foreign_key_field: <span class=\"hljs-string\">'directory_id'</span>},\n        directory_id: {type: <span class=\"hljs-string\">'ForeignKey'</span>}\n    }\n};\n\nLava.schema.modules[<span class=\"hljs-string\">'DemoFolders'</span>] = {\n    fields: {\n        id: {type: <span class=\"hljs-string\">'Id'</span>},\n        title: {type: <span class=\"hljs-string\">'Basic'</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-string\">''</span>},\n        <span class=\"hljs-comment\">// id of the parent directory</span>\n        parent_id: {type: <span class=\"hljs-string\">'ForeignKey'</span>},\n        <span class=\"hljs-comment\">// virtual field: parent directory. References record from this module, by id from \"parent_id\" field</span>\n        parent: {type: <span class=\"hljs-string\">'Record'</span>, module: <span class=\"hljs-string\">'this'</span>, foreign_key_field: <span class=\"hljs-string\">'parent_id'</span>},\n        <span class=\"hljs-comment\">// virtual field. Collection of \"child\" directories</span>\n        <span class=\"hljs-comment\">// (who's parent_id refers to this instance)</span>\n        directories: {type: <span class=\"hljs-string\">'Collection'</span>, module: <span class=\"hljs-string\">'this'</span>, record_field: <span class=\"hljs-string\">'parent'</span>},\n        <span class=\"hljs-comment\">// collection of records from another module</span>\n        files: {type: <span class=\"hljs-string\">'Collection'</span>, module: <span class=\"hljs-string\">'DemoFiles'</span>, record_field: <span class=\"hljs-string\">'directory'</span>}\n    }\n}\n\n<span class=\"hljs-comment\">// create and get a global instance</span>\n<span class=\"hljs-keyword\">var</span> folders_module = Lava.app.getModule(<span class=\"hljs-string\">'DemoFolders'</span>);\n<span class=\"hljs-comment\">// load data manually</span>\nfolders_module.loadRecords([{\n    id: <span class=\"hljs-number\">1</span>,\n    title: <span class=\"hljs-string\">'Folder 1'</span>,\n    directories: [{\n        id: <span class=\"hljs-number\">2</span>,\n        title: <span class=\"hljs-string\">'Folder 2'</span>,\n\n        <span class=\"hljs-comment\">// notice: raw records from another module</span>\n        files: [{\n            id: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// id in DemoFiles module</span>\n            title: <span class=\"hljs-string\">'File 1'</span>\n        }]\n    }],\n    files: [{\n        id: <span class=\"hljs-number\">2</span>,\n        title: <span class=\"hljs-string\">'File 2'</span>\n    }]\n},{\n    id: <span class=\"hljs-number\">3</span>,\n    title: <span class=\"hljs-string\">'Folder 3'</span>\n}]);\n\n<span class=\"hljs-comment\">// at this moment, DemoFiles module is created, and already has two records in it</span>\n\n<span class=\"hljs-comment\">// get Enumerable with files in directory #1</span>\n<span class=\"hljs-keyword\">var</span> files = folders_module.getRecordById(<span class=\"hljs-number\">1</span>).get(<span class=\"hljs-string\">'files'</span>);\n<span class=\"hljs-comment\">// it has one file</span>\n<span class=\"hljs-keyword\">var</span> file = files.getValueAt(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// returns an instance of Record from DemoFiles module</span>\n\n<span class=\"hljs-comment\">// the most important feature</span>\nfile.set(<span class=\"hljs-string\">'directory'</span>, folders_module.getRecordById(<span class=\"hljs-number\">3</span>));\n\n<span class=\"hljs-comment\">// now file has gone from old directory</span>\nfiles.getValueAt(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-comment\">// third directory now has one file</span>\nfolders_module.getRecordById(<span class=\"hljs-number\">3</span>).get(<span class=\"hljs-string\">'files'</span>).getValueAt(<span class=\"hljs-number\">0</span>) == file; <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// you can also get the same file record directly from it's module</span>\nLava.app.getModule(<span class=\"hljs-string\">'DemoFiles'</span>).getRecordById(<span class=\"hljs-number\">2</span>) == file; <span class=\"hljs-comment\">// true</span></pre></div></div></div><p>In this example, when we retrieved DemoFolders module, the other one was created automatically\n(cause they depend on each other). Also notice how DemoFolders loaded records into DemoFiles, in <code>files</code> from import.</p>\n<p>Note: Collection field does not need Id and ForeignKey fields to function properly,\nso if you don&#39;t need them - they can be removed.</p>\n<h2 id=\"architecture\">Architecture</h2>\n<ul>\n<li>In it&#39;s constructor, <a href=\"/www/doc.html#class=Lava.data.Module\">Lava.data.Module</a> creates all fields, than calls onModuleFieldsCreated of each field,\nand passes an object with default record&#39;s properties.</li>\n<li>Default record&#39;s properties then are serialized into a constructor.\nEach time a new record is created - it receives a new instance of it&#39;s properties from module.</li>\n<li>All record&#39;s properties are stored in module&#39;s internal hash - <a href=\"/www/doc.html#class=Lava.data.ModuleAbstract;member=_properties_by_guid\">ModuleAbstract#_properties_by_guid</a>.\nAll fields have a reference to that hash - this way every field has access to properties of all records, that belong to it&#39;s module.</li>\n<li>All records have a reference to their module&#39;s fields object.\nRecord&#39;s getter and setter call <a href=\"/www/doc.html#class=Lava.data.field.Abstract;member=getValue\">Abstract#getValue</a> and <a href=\"/www/doc.html#class=Lava.data.field.Abstract;member=setValue\">Abstract#setValue</a> of corresponding fields.</li>\n</ul>\n<p>As was mentioned, fields have access to all properties of all records of their module.\nAny field can read properties of other fields directly, but fields should not modify properties, that don&#39;t belong to them.</p>\n<p>Also note, that a field can store it&#39;s value in two or more record&#39;s properties.\nFor example, you can imagine a ComplexNumber field:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">record.get(<span class=\"hljs-string\">'complex_field'</span>); <span class=\"hljs-comment\">// returns an object: {x: number, y: number}</span>\nrecord.set(<span class=\"hljs-string\">'complex_field'</span>, {\n    x: <span class=\"hljs-number\">1</span>,\n    y: <span class=\"hljs-number\">0</span>\n});</pre></div></div></div><p>Internally, you may decide to store the &quot;x&quot; and &quot;y&quot; properties separately, in <code>record._properties[&#39;complex_field_x&#39;]</code> and\n<code>record._properties[&#39;complex_field_y&#39;]</code> respectively.</p>\n<h2 id=\"metastorage-module\">MetaStorage module</h2>\n<p>This module is designed to extend records from standard modules with additional fields.\nFor example, the Tree widget stores the &quot;expanded&quot; state of it&#39;s records in MetaStorage.\nThis allows to have several trees on one page, that are bound to same data, but expand their nodes separately from each other.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> meta_storage = <span class=\"hljs-keyword\">new</span> Lava.data.MetaStorage({\n    fields: {\n        <span class=\"hljs-string\">'is_expanded'</span>: {type:<span class=\"hljs-string\">'Boolean'</span>}\n    }\n});\n\n<span class=\"hljs-keyword\">var</span> meta_record = meta_storage.createMetaRecord(<span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// you pass a GUID of record from standard module</span>\n<span class=\"hljs-comment\">// meta_record = meta_storage.get(123); // you can get created MetaRecords by GUIDs of external records</span></pre></div></div></div><p>Records in MetaStorage are referenced by GUIDs of external records. MetaStorage implements <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a>,\nwhich allows it to be used in templates for data binding.</p>\n<h2 id=\"field-roles-and-naming-conventions\">Field roles and naming conventions</h2>\n<p>Two frequently used field names are &quot;name&quot; and &quot;title&quot;.</p>\n<ul>\n<li>&quot;name&quot; is for computers, while &quot;title&quot; is for humans.</li>\n<li>&quot;name&quot; is usually shown in URL, while &quot;title&quot; may be inside &lt;H1&gt; or page&#39;s &lt;title&gt; tag.</li>\n<li>&quot;name&quot; is usually unique, while there may be several records with one title.</li>\n</ul>\n<p>Example: a cheese titled &quot;Fontina Val d&#39;Aosta&quot; could have name &quot;fontina_val_d_aosta&quot;.</p>\n<p>Example 2: you have two records in your database, titled &quot;Nokia Lumia 1020&quot;.\nBut one is named &quot;nokia_lumia_1020_black&quot;, and other is &quot;nokia_lumia_1020_white&quot;.</p>\n<h2 id=\"record-and-collection-fields\">Record and Collection fields</h2>\n<p>Record field holds a record, usually from another module. Collection field holds an Enumerable with records.\nModule which owns the field is called &quot;local&quot; module, and module which owns the records\nfrom these fields is called &quot;external&quot; or &quot;foreign module&quot;.</p>\n<p>Foreign module may be the same as local (field references another record from it&#39;s own module).\nIn this case, you need to supply <span class=\"api-string\">&quot;this&quot;</span> as referenced module name:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.schema.modules[<span class=\"hljs-string\">'DemoTree'</span>] = {\n    fields: {\n        title: {type: <span class=\"hljs-string\">'Basic'</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-string\">''</span>},\n        parent: {type: <span class=\"hljs-string\">'Record'</span>, module: <span class=\"hljs-string\">'this'</span>},\n        children: {type: <span class=\"hljs-string\">'Collection'</span>, module: <span class=\"hljs-string\">'this'</span>, record_field: <span class=\"hljs-string\">'parent'</span>}\n    }\n};</pre></div></div></div><p>Collection field needs corresponding Record field to function.\nIn config you must provide the name of it&#39;s <code>record_field</code> in foreign module.\nSetting Record field to new value moves the record to new Enumerable in corresponding Collection field.</p>\n<p>Collection fields are readonly, you can not assign a new Enumerable to record&#39;s &quot;children&quot;.\nInstead, you must iterate over collection records and set their &quot;parent&quot; to new value.\nYou can also add and remove records directly from\nEnumerable instances, and corresponding Record fields will also be updated.</p>\n<p>Each Record field may have an attached ForeignKey field from the same module.\nSetting Record field to new value also updates corresponding ForeignKey field\n(which in turn moves record to new Enumerable), and vice versa.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.schema.modules[<span class=\"hljs-string\">'DemoTree'</span>] = {\n    fields: {\n        id: {type: <span class=\"hljs-string\">'Id'</span>},\n        title: {type: <span class=\"hljs-string\">'Basic'</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-string\">''</span>},\n        parent: {type: <span class=\"hljs-string\">'Record'</span>, module: <span class=\"hljs-string\">'this'</span>, foreign_key_field: <span class=\"hljs-string\">'parent_id'</span>},\n        parent_id: {type: <span class=\"hljs-string\">'ForeignKey'</span>},\n        children: {type: <span class=\"hljs-string\">'Collection'</span>, module: <span class=\"hljs-string\">'this'</span>, record_field: <span class=\"hljs-string\">'parent'</span>}\n    }\n};</pre></div></div></div>"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}