{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"x-container_config-directive\">x:container_config directive</h1>\n<p>For views and widgets: directive extends <a href=\"/www/doc.html#object=Support;member=_cView.container\">_cView#container</a> config property with provided options.</p>\n<p>Content of the directive must be a valid JavaScript object. <b>Only &#39;class&#39; and &#39;options&#39; properties are allowed.</b>\n&#39;options&#39; property is merged with existing one.</p>\n<h3 id=\"example\">Example</h3>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre><pre class=\"lava-code-content hljs xml\">{$if(is_expanded)}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:refresher</span>&gt;</span>{class: 'Standard'}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:refresher</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:container_config</span>&gt;</span>\n    {\n      class: \"Emulated\",\n      options: {\n        appender: 'AfterPrevious'\n      }\n    }\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:container_config</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n{/if}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre><pre class=\"lava-code-content hljs javascript\">{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"If\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n        },\n        flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n        binds: [{property_name: <span class=\"hljs-string\">\"is_expanded\"</span>}]\n    },\n    container: {\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Emulated\"</span>,\n        options: {appender: <span class=\"hljs-string\">\"AfterPrevious\"</span>}\n    },\n    refresher: {<span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Standard\"</span>},\n    template: [\n        <span class=\"hljs-string\">\"\\r\\n\\t\\r\\n\\t\\r\\n\\t\"</span>,\n        {\n            type: <span class=\"hljs-string\">\"view\"</span>,\n            <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n            container: {\n                <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Element\"</span>,\n                tag_name: <span class=\"hljs-string\">\"div\"</span>\n            }\n        },\n        <span class=\"hljs-string\">\"\\r\\n\"</span>\n    ]\n}</pre></div></div><p>Using with element containers:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:container_config</span>&gt;</span>{class: \"MyElementContainer\"}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:container_config</span>&gt;</span>\n  {#&gt; \"Hello world\" }\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre><pre class=\"lava-code-content hljs javascript\">{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-string\">\"Hello world\"</span>);\n        },\n        flags: {\n            isStatic: <span class=\"hljs-literal\">true</span>,\n            isString: <span class=\"hljs-literal\">true</span>\n        }\n    },\n    container: {\n        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"MyElementContainer\"</span>,\n        tag_name: <span class=\"hljs-string\">\"div\"</span>\n    }\n}</pre></div></div><h2 id=\"architecture\">Architecture</h2>\n<p>Usage with element containers is handled separately in <a href=\"/www/doc.html#object=Lava.parsers.Common;member=_compileContainer\">Common._compileContainer</a>.</p>\n"],
	container: {
		"class": "Element",
		tag_name: "div"
	}
}