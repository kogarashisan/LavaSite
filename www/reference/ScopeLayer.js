{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"scope-layer\">Scope layer</h1>\n<p>The term &quot;scope layer&quot; refers to classes inside the src/Scope folder.\nThese classes are used each time the framework needs to evaluate an expression, \nso it&#39;s important to understand how they work. Most likely, you will never need to create any of them directly.</p>\n<p>All scopes extend <a href=\"/www/doc.html#class=Lava.mixin.Refreshable\">Lava.mixin.Refreshable</a>, which allows them to form a hierarchy of dependent instances.\nHierarchy is needed to maintain correct refresh order.</p>\n<h2 id=\"propertybinding\">PropertyBinding</h2>\n<p><a href=\"/www/doc.html#class=Lava.scope.PropertyBinding\">Lava.scope.PropertyBinding</a> can be used to bind to instances of <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a> mixin.\nIt&#39;s used to bind to views and widgets, since they all extend it.</p>\n<p>You can execute the following example in your browser&#39;s console:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> binding_target = <span class=\"hljs-keyword\">new</span> Lava.mixin.Properties({\n    test: <span class=\"hljs-string\">'value1'</span>\n});\n<span class=\"hljs-comment\">// second parameter is property name</span>\n<span class=\"hljs-keyword\">var</span> property_binding = <span class=\"hljs-keyword\">new</span> Lava.scope.PropertyBinding(binding_target, <span class=\"hljs-string\">'test'</span>);\n\nproperty_binding.getValue(); <span class=\"hljs-comment\">// returns 'value1'</span>\n\nbinding_target.set(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'new value'</span>);\nproperty_binding.getValue(); <span class=\"hljs-comment\">// still returns 'value1'</span>\n\nLava.ScopeManager.refresh();\nproperty_binding.getValue(); <span class=\"hljs-comment\">// now returns 'new value'</span></pre></div></div><p>As you see, scope did not refresh it&#39;s value immediately, only after calling <a href=\"/www/doc.html#object=Lava.ScopeManager;member=refresh\">ScopeManager#refresh</a>.\nAlternatively, you can make a click anywhere on page: every DOM event listener callback ends with a call to <code>refresh()</code>.</p>\n<p>How it works:</p>\n<ul>\n<li>when you call <code>set</code> on <code>binding_target</code> - scope receives the &quot;property changed&quot; event from <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a></li>\n<li>scope places itself into refresh queue in <a href=\"/www/doc.html#object=Lava.ScopeManager\">Lava.ScopeManager</a></li>\n<li>on every refresh cycle <a href=\"/www/doc.html#object=Lava.ScopeManager\">Lava.ScopeManager</a> calls <a href=\"/www/doc.html#class=Lava.mixin.Refreshable;member=refresh\">Refreshable#refresh</a> of every scope in it&#39;s queue.\nDuring this process new scopes may be added into the queue. Process stops when there are no scopes to refresh.</li>\n<li>when PropertyBinding instance receives <code>refresh()</code> call - it compares the old and new property values of the bound object.\nIf values differ - it refreshes it&#39;s local value and fires it&#39;s own <a href=\"/www/doc.html#class=Lava.scope.PropertyBinding;event=changed\">changed</a> event.</li>\n</ul>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> test_handler = {\n    onChanged: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>console.log(<span class=\"hljs-string\">'Inside the changed event handler'</span>);}\n};\n<span class=\"hljs-keyword\">var</span> listener = property_binding.on(<span class=\"hljs-string\">'changed'</span>, test_handler.onChanged, test_handler);\n\nbinding_target.set(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'This value differs from previous'</span>);\nLava.ScopeManager.refresh();\n<span class=\"hljs-comment\">// you will see \"Inside the changed event handler\" in console</span>\n\nproperty_binding.removeListener(listener);</pre></div></div><p>Also note, that bound property does not necessarily need to exist:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> example_binding = <span class=\"hljs-keyword\">new</span> Lava.scope.PropertyBinding(<span class=\"hljs-keyword\">new</span> Lava.mixin.Properties(), <span class=\"hljs-string\">'test'</span>);\nexample_binding.getValue(); <span class=\"hljs-comment\">// returns undefined</span></pre></div></div><h3 id=\"setiing-bound-values\">Setiing bound values</h3>\n<p>To provide two-way binding for input controls, PropertyBinding, <a href=\"/www/doc.html#class=Lava.scope.DataBinding\">Lava.scope.DataBinding</a>\nand <a href=\"/www/doc.html#class=Lava.scope.Segment\">Lava.scope.Segment</a> support setting the bound value.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs javascript\">property_binding.setValue(<span class=\"hljs-string\">'this value was set via setValue'</span>);</pre></div></div><p>Note: call to <code>setValue</code> will update the bound source, but not the current scope value. \nYou may need to call <a href=\"/www/doc.html#object=Lava.ScopeManager;member=refresh\">ScopeManager#refresh</a> to receive &quot;changed&quot; event.</p>\n<h2 id=\"databinding\">DataBinding</h2>\n<p><a href=\"/www/doc.html#class=Lava.scope.DataBinding\">Lava.scope.DataBinding</a> is constructed from PropertyBinding and binds to property of it&#39;s value.\nPropertyBinding itself may return anything: object, instance of Properties, Enumerable, string or even null.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-comment\">// ... previous example goes here ...</span>\n\nbinding_target.set(<span class=\"hljs-string\">'test'</span>, {\n    property_of_test: <span class=\"hljs-string\">'second level property'</span>\n});\nLava.ScopeManager.refresh();\n<span class=\"hljs-keyword\">var</span> data_binding = <span class=\"hljs-keyword\">new</span> Lava.scope.DataBinding(property_binding, <span class=\"hljs-string\">'property_of_test'</span>);\n\n<span class=\"hljs-comment\">// or:</span>\n<span class=\"hljs-comment\">// var data_binding = property_binding.getDataBinding('property_of_test');</span>\n\ndata_binding.getValue(); <span class=\"hljs-comment\">// returns 'second level property'</span></pre></div></div><p>Note, that if you bind to a plain object, like in previous example, DataBinding will not detect changes to it&#39;s properties.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> data_source = binding_target.get(<span class=\"hljs-string\">'test'</span>);\ndata_source.property_of_test = <span class=\"hljs-string\">'new value'</span>; <span class=\"hljs-comment\">// it's a plain object</span>\n\nLava.ScopeManager.refresh();\ndata_binding.getValue(); <span class=\"hljs-comment\">// still returns 'second level property'</span>\n\n<span class=\"hljs-comment\">// now we assign completely new object</span>\nbinding_target.set(<span class=\"hljs-string\">'test'</span>, {\n    property_of_test: <span class=\"hljs-string\">'new value of object property'</span>\n});\nLava.ScopeManager.refresh();\ndata_binding.getValue(); <span class=\"hljs-comment\">// now returns 'new value of object property'</span></pre></div></div><p>There are two ways to make DataBinding to detect changes: either to bind it to a Properties instance,\nor change the whole object, to which it&#39;s bound - in that case it will receive &#39;changed&#39; event from PropertyBinding\nand update itself. Example of binding to an object:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-comment\">// now it will always detect changes</span>\nbinding_target.set(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-keyword\">new</span> Lava.mixin.Properties({\n    property_of_test: <span class=\"hljs-string\">'new value of object property'</span>\n}));\n\nbinding_target.get(<span class=\"hljs-string\">'test'</span>).set(<span class=\"hljs-string\">'property_of_test'</span>, <span class=\"hljs-string\">'this will be detected'</span>);</pre></div></div><h3 id=\"binding-to-enumerable-and-array-indices\">Binding to Enumerable and array indices</h3>\n<p>You can bind to <a href=\"/www/doc.html#class=Lava.system.Enumerable\">Lava.system.Enumerable</a> indices, and be notified when bound index changes.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> demo_enumerable = <span class=\"hljs-keyword\">new</span> Lava.system.Enumerable([<span class=\"hljs-string\">'initial value'</span>]);\nproperty_binding.setValue(demo_enumerable);\n<span class=\"hljs-keyword\">var</span> index_data_binding = property_binding.getDataBinding(<span class=\"hljs-string\">'0'</span>);\ndemo_enumerable.replaceAt(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'new value at index 0'</span>);\n<span class=\"hljs-comment\">// data_binding has received 'collection_changed' event from Enumerable and will update it's value</span></pre></div></div><p>This way you can also retrieve indices of common arrays, but framework does not track changes in plain JavaScript objects.</p>\n<h2 id=\"scope-chains-in-expressions\">Scope chains in expressions</h2>\n<p>When you evaluate a property in expression - a <a href=\"/www/doc.html#class=Lava.scope.PropertyBinding\">Lava.scope.PropertyBinding</a> is created:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs text\">{#> count}</pre></div></div><p>This will find a view with <code>count</code> property and call it&#39;s <a href=\"/www/doc.html#class=Lava.view.Abstract;member=getDataBinding\">Abstract#getDataBinding</a> \n(returns an instance of <a href=\"/www/doc.html#class=Lava.scope.PropertyBinding\">Lava.scope.PropertyBinding</a>).</p>\n<p>When you evaluate a chain of properties - additional <a href=\"/www/doc.html#class=Lava.scope.DataBinding\">Lava.scope.DataBinding</a> instances are created:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs text\">{#> my_object.property1.property2}</pre></div></div><p>First, framework will retrieve an instance of PropertyBinding which is bound to <code>my_object</code> property. \nThen getDataBinding is called from that instance (<a href=\"/www/doc.html#class=Lava.scope.PropertyBinding;member=getDataBinding\">PropertyBinding#getDataBinding</a>) - \nit returns <a href=\"/www/doc.html#class=Lava.scope.DataBinding\">Lava.scope.DataBinding</a>. And in the same way - third segment will be created from the second one.</p>\n<p>So, the above expression can be evaluated manually in the following way:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-comment\">// We want to evaluate this expression in context of `current_view`</span>\n<span class=\"hljs-keyword\">var</span> view_with_property = current_view.locateViewWithProperty(<span class=\"hljs-string\">\"my_object\"</span>);\n<span class=\"hljs-keyword\">var</span> bind1 = view_with_property.getDataBinding(<span class=\"hljs-string\">\"my_object\"</span>); <span class=\"hljs-comment\">// returns an instance of PropertyBinding</span>\n<span class=\"hljs-keyword\">var</span> bind2 = bind1.getDataBinding(<span class=\"hljs-string\">\"property1\"</span>); <span class=\"hljs-comment\">// returns an instance of DataBinding</span>\n<span class=\"hljs-keyword\">var</span> bind3 = bind2.getDataBinding(<span class=\"hljs-string\">\"property2\"</span>); <span class=\"hljs-comment\">// returns DataBinding</span>\n<span class=\"hljs-keyword\">var</span> chain_value = bind3.getValue();</pre></div></div><h2 id=\"segments\">Segments</h2>\n<p>Segments bind to a dynamically selected property name.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> data_source = <span class=\"hljs-keyword\">new</span> Lava.mixin.Properties({\n    people: {\n        good_man: <span class=\"hljs-string\">'Harry Potter'</span>,\n        bad_man: <span class=\"hljs-string\">'Lord Voldemort'</span>\n    },\n    name_source: <span class=\"hljs-string\">'good_man'</span> <span class=\"hljs-comment\">// we will show `data_source.people.good_man`</span>\n});\n\n<span class=\"hljs-comment\">// the scope, which will tell us, who we want to show</span>\n<span class=\"hljs-keyword\">var</span> name_source_binding = <span class=\"hljs-keyword\">new</span> Lava.scope.PropertyBinding(data_source, <span class=\"hljs-string\">'name_source'</span>);\n<span class=\"hljs-comment\">// in practice, `data_source` will be an instance of a view or widget (they inherit from Properties)</span>\n<span class=\"hljs-keyword\">var</span> container = <span class=\"hljs-keyword\">new</span> Lava.scope.PropertyBinding(data_source, <span class=\"hljs-string\">'people'</span>);\n<span class=\"hljs-keyword\">var</span> segment = <span class=\"hljs-keyword\">new</span> Lava.scope.Segment(container, name_source_binding);\nsegment.getValue(); <span class=\"hljs-comment\">// returns 'Harry Potter'</span>\n\nname_source_binding.setValue(<span class=\"hljs-string\">'bad_man'</span>); <span class=\"hljs-comment\">// select different property in container</span>\nLava.ScopeManager.refresh();\nsegment.getValue(); <span class=\"hljs-comment\">// now returns 'Lord Voldemort'</span></pre></div></div><p>In the case above, segment is bound to another property inside <code>data_source</code> (<code>people</code>), \nbut in practice you do not need a separate property. \nHere is an example when variable which holds the name and dynamically selected properties belong to the same object \n(<a href=\"/www/doc.html#class=Lava.widget.Standard\">Lava.widget.Standard</a> implements <a href=\"/www/doc.html#class=Lava.mixin.Properties\">Lava.mixin.Properties</a>):</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> test_widget = <span class=\"hljs-keyword\">new</span> Lava.widget.Standard({is_extended: <span class=\"hljs-literal\">true</span>});\ntest_widget.setProperties({\n    good_man: <span class=\"hljs-string\">'Harry Potter'</span>,\n    bad_man: <span class=\"hljs-string\">'Lord Voldemort'</span>,\n    name_source: <span class=\"hljs-string\">'good_man'</span> <span class=\"hljs-comment\">// we will show `data_source.people.good_man`</span>\n});\n\n<span class=\"hljs-keyword\">var</span> name_source_binding = test_widget.getDataBinding(<span class=\"hljs-string\">'name_source'</span>); <span class=\"hljs-comment\">// returns instance of Lava.scope.PropertyBinding</span>\n<span class=\"hljs-keyword\">var</span> segment = test_widget.getSegment(name_source_binding); <span class=\"hljs-comment\">// returns instance of Lava.scope.Segment</span>\nsegment.getValue(); <span class=\"hljs-comment\">// returns 'Harry Potter'</span>\n\nname_source_binding.setValue(<span class=\"hljs-string\">'bad_man'</span>);\nLava.ScopeManager.refresh();\nsegment.getValue(); <span class=\"hljs-comment\">// now returns 'Lord Voldemort'</span></pre></div></div><p>Internally, Segment gets the property name, which it should bind to, from <code>name_source_binding</code> scope.\nAnd then calls getDataBinding from it&#39;s value container (first argument, either scope or widget).</p>\n<p>Note: from architect&#39;s point of view it&#39;s much better to put selected records into a separate property, like in the first example.\nEspecially, if you add records to <code>people</code> dynamically.</p>\n<p>See also: <a href=\"/www/doc.html#class=Lava.widget.Standard;member=getDataBinding\">Standard#getDataBinding</a>.</p>\n<h2 id=\"segments-in-expressions\">Segments in expressions</h2>\n<p>Segments are created with square bracket syntax. Examples, described above, are equivalent to the following expressions:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs text\">{#> people[name_source]}</pre></div></div><div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs text\">{#> $my_widget[name_source]}</pre></div></div><p>First expression will find views which have <code>people</code> and <code>name_source</code> properties, and create PropertyBindings to them:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-comment\">// We are evaluating this expression in context of `current_view`</span>\n<span class=\"hljs-keyword\">var</span> data_source = current_view.locateViewWithProperty(<span class=\"hljs-string\">\"people\"</span>).getDataBinding(<span class=\"hljs-string\">'people'</span>); <span class=\"hljs-comment\">// returns PropertyBinding</span>\n<span class=\"hljs-keyword\">var</span> name_source = current_view.locateViewWithProperty(<span class=\"hljs-string\">\"name_source\"</span>).getDataBinding(<span class=\"hljs-string\">'name_source'</span>); <span class=\"hljs-comment\">// returns PropertyBinding</span>\n<span class=\"hljs-keyword\">var</span> segment = <span class=\"hljs-keyword\">new</span> Lava.scope.Segment(data_source, name_source);</pre></div></div><p>Second will find the widget, named &quot;my_widget&quot;, and use it as <code>data_source</code>.\nSee <a href=\"/www/doc.html#reference=WritingExpressions\">Writing expressions</a> reference for better explanation.</p>\n<p>Warning: you can not create segments from segments. Such syntax is not allowed:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n</pre><pre class=\"lava-code-content hljs text\">// invalid:\npeople[something[another_thing]]\npeople[get_name()]</pre></div></div><p>Inside square brackets there must be no other square brackets or function calls.\nEven if you create such construct by hands, it&#39;s not guaranteed, that it will be able update itself correctly.\nHowever, any paths to variables are allowed in <code>name_source</code>:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><pre class=\"lava-code-content hljs text\">// valid:\nsomething[other_thing.property1.property2].another_thing\nsomething[$my_widget.another_thing]\nsomething[$my_widget~1->another_thing]\n$my_widget.do_something(people[name_source])</pre></div></div><p>For explanation of constructs like <code>$my_widget~1-&gt;another_thing</code> - see <a href=\"/www/doc.html#reference=WritingExpressions\">Writing expressions</a>.</p>\n<h2 id=\"setvalue-on-databinding-and-segment\">setValue on DataBinding and segment</h2>\n<p>They also support <code>setValue()</code>, but unlike PropertyBinding, which is always bound to a widget, \nSegment and DataBinding may be bound to different kinds of objects, which may be null sometimes. \nIf setValue is impossible - it will be ignored silently.</p>\n<h2 id=\"scope-caching\">Scope caching</h2>\n<p>Once you bind to any property - a new scope is created. When you bind to the same property again, you will receive\nthe same scope instance. Segments are also cached.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> test_widget = <span class=\"hljs-keyword\">new</span> Lava.widget.Standard({is_extended: <span class=\"hljs-literal\">true</span>});\n<span class=\"hljs-keyword\">var</span> binding1 = test_widget.getDataBinding(<span class=\"hljs-string\">'property1'</span>);\n<span class=\"hljs-keyword\">var</span> binding2 = binding1.getDataBinding(<span class=\"hljs-string\">'property2'</span>);\n\nbinding1 == test_widget.getDataBinding(<span class=\"hljs-string\">'property1'</span>); <span class=\"hljs-comment\">// true</span>\nbinding2 == binding1.getDataBinding(<span class=\"hljs-string\">'property2'</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-keyword\">var</span> segment = test_widget.getSegment(binding1);\nsegment == test_widget.getSegment(binding1); <span class=\"hljs-comment\">// true</span></pre></div></div>"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}