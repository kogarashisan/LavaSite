{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"browser-parsing-features-and-common-pitfalls\">Browser parsing features and common pitfalls</h1>\n<p>You must know how browser behaves, when it parses HTML. This article aims to save some time for novice developers\nand provide better understanding on several design aspects of Lava framework.</p>\n<h2 id=\"html-parsing-and-validity\">HTML parsing and validity</h2>\n<p>First of all, text inside &lt;script&gt; tags is not parsed. If you want to include some invalid HTML in your page,\nwhich is however a valid Lava template, you must enclose it inside a &lt;script&gt; tag.\nFramework provides special support for this kind of inclusion, see documentation on template parsing.</p>\n<p>Tags are not valid everywhere on page. In example below, the panel has &quot;title&quot; and &quot;content&quot; tags:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">collapsible-panel</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">title</span>&gt;</span>The title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">content</span>&gt;</span>The content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">content</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">collapsible-panel</span>&gt;</span></pre></div></div><p>But &lt;title&gt; is a reserved tag name: it&#39;s valid only inside &lt;head&gt;, and must not contain other tags.\nIf browser finds any tags inside it - they will be removed for validity reasons.</p>\n<p>You can write HTML, that will be perfectly valid Lava template, but when you retrieve the innerHTML of panel tag\nfor parsing - you will find that tags inside &quot;title&quot; are already removed.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">title</span>&gt;</span>The title. <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">b</span>&gt;</span>This all will be removed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">b</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">title</span>&gt;</span></pre></div></div><p>Framework solves this by providing special &lt;script&gt; blocks, that preserve original template from modification.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-comment\">&lt;!-- Method 1 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">collapsible-panel</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:equiv</span>=<span class=\"hljs-value\">\"title\"</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"lava/template\"</span>&gt;</span><span class=\"javascript\">Now you can write &lt;b&gt;anything&lt;<span class=\"hljs-regexp\">/b&gt; here</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">content</span>&gt;</span>The content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">content</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">collapsible-panel</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Method 2 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">collapsible-panel</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"lava/fragment\"</span>&gt;</span><span class=\"javascript\">\n        &lt;title&gt;Now you can write &lt;b&gt;anything&lt;<span class=\"hljs-regexp\">/b&gt; here&lt;/</span>title&gt;\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">content</span>&gt;</span>The content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">content</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">collapsible-panel</span>&gt;</span></pre></div></div><p>Note the type=&quot;lava/template&quot; attribute: it&#39;s needed by browser (otherwise it will try to execute the script as JavaScript).</p>\n<p>Text between &lt;table&gt; and &lt;tr&gt; tags is also forbidden, but sometimes you will want to iterate over a set of rows:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"lava/fragment\"</span>&gt;</span><span class=\"javascript\">\n    &lt;table&gt;\n        {#foreach(rows) as=row}\n            &lt;tr&gt;\n                <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span>&gt;</span>{#&gt;row.first_name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span>&gt;</span>{#&gt;row.last_name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">tr</span>&gt;</span>\n        {/foreach}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">table</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></pre></div></div><p>See reference on templates for explanation.</p>\n<h2 id=\"void-tags\">Void tags</h2>\n<p>Tags that do not need a closing tag are called &quot;void&quot;. This list includes tags like &quot;br&quot;, &quot;img&quot; or &quot;input&quot;.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-comment\">&lt;!-- before HTML5 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"image.png\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- since HTML5 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"image.png\"</span>&gt;</span></pre></div></div><p>Notice the slash at the end of the first image tag. Tags that end with &quot;/&gt;&quot; are called selfclosing.</p>\n<p>Since HTML5 - there are no selfclosing tags anymore: void tags do not require selfclosing suffix.\nAnd even worse: if suffix exists - it will be ignored. This means, that you cannot write custom selfclosing tags, like this:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-comment\">&lt;!-- Invalid --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:my_directive</span> /&gt;</span></pre></div></div><p>In HTML5 mode - there will be an opening &lt;x:my_directive&gt; tag, without the corresponding closing tag,\nand anything that follows - will be inside that tag.\nBrowser will automatically close it, when it&#39;s parent tag is closed,\nbut Lava template parser will not parse that invalid result:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:my_directive</span> /&gt;</span>\n    this is invalid\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- this is equivalent to: --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:my_directive</span>&gt;</span>\n        this is invalid\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:my_directive</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div></div><p>Lava parsers understand void and selfclosing tags, but you should remember, that browser behaves differently\nin HTML4 and HTML5 modes, so you must explicitly close all non-void tags - this can save you a lot of time on debugging.</p>\n<p>See also: <a href=\"/www/doc.html#object=Lava;member=VOID_TAGS\">Lava#VOID_TAGS</a></p>\n<h2 id=\"escaped-characters\">Escaped characters</h2>\n<p>If you get innerHTML from a &lt;div&gt; and some other tags - browser will escape &quot;&lt;&quot;, &quot;&gt;&quot; and &quot;&amp;&quot; symbols.\nThese symbols are used in expressions as comparison and logical operators, but there is no need to worry about it:\nExpressionParser understands these entities and converts them back to their normal form.\nIf this matters to you - than you can enclose the template into &lt;script&gt; tag.</p>\n<p>What&#39;s more important, is that when you get values of attributes from JavaScript - entities are\nunescaped by browser. This matters, when you define tooltips.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span> <span class=\"hljs-attribute\">data-tooltip</span>=<span class=\"hljs-value\">\"&amp;lt;b&amp;gt;test&amp;gt;/b&amp;gt;\"</span>&gt;</span>...</pre></div><div class=\"api-code-header api-code-header-blue\">Javascript</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs javascript\">Firestorm.Element.getAttribute(document.body, <span class=\"hljs-string\">\"data-tooltip\"</span>); <span class=\"hljs-comment\">// will return \"&lt;b&gt;test&lt;/b&gt;\"</span></pre></div></div><h2 id=\"javascript-features-and-issues\">JavaScript features and issues</h2>\n<p>First of all, you can return an object from constructor, and it will be treated as result of the <span class=\"api-keyword\">new</span> operator.\nThis feature is used in the process of widget config extension.</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">irregularConstructor</span><span class=\"hljs-params\">()</span> {</span>\n    <span class=\"hljs-keyword\">return</span> {\n        test: <span class=\"hljs-number\">1</span>\n    }\n};\n\n<span class=\"hljs-keyword\">var</span> instance = <span class=\"hljs-keyword\">new</span> irregularConstructor();\ninstance.test; <span class=\"hljs-comment\">// 1</span></pre></div></div><p>Second, there are performance related issues:\nyou should not add new members to objects, which were constructed with <span class=\"api-keyword\">new</span> operator.\nAnd especially, never use <span class=\"api-keyword\">delete</span> operator on constructed objects.</p>\n<p><span class=\"api-keyword\">delete</span> operator may significantly slow down your code, so try to avoid it whenever possible.\nFor more information, read V8 optimization articles in the internet.</p>\n"],
	container: {
		"class": "Element",
		tag_name: "div"
	}
}