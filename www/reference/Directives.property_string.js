{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"x-property_string-directive\">x:property_string directive</h1>\n<table class=\"api-member-table doc-directive-quick-facts\"><thead><tr><td>Quick facts</td><td></td></tr></thead><tbody><tr><td>Has analog in widget definition tags</td><td>No</td></tr><tr><td>Produces result</td><td>No</td></tr><tr><td>Widget only directive</td><td>Yes</td></tr><tr><td>Multiple usage</td><td>Allowed</td></tr></tbody></table>\n\n\n\n<p>Allows to set one property in <a href=\"/www/doc.html#object=Support;member=_cWidget.properties\">_cWidget#properties</a>, but instead of parsing - it will treat it&#39;s content as text.\nThis way, text inside the directive does not require to be quoted.</p>\n<h3 id=\"example\">Example</h3>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">text_input</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:property_string</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"value\"</span>&gt;</span>I'm a \"happy\" string.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:property_string</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">text_input</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"widget\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n    extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n    <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"TextInput\"</span>,\n    properties: {value: <span class=\"hljs-string\">\"I'm a \\\"happy\\\" string.\"</span>}\n}]</pre></div></div><p>Note: the content of the directive is parsed just like any other part of template, so this will <b>NOT</b> work \n(cause inside there is a character sequence which represents an opening block):</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:property_string</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"value\"</span>&gt;</span>this is a very {#bad()} string<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:property_string</span>&gt;</span></pre></div></div><p>The right way:</p>\n<p><!-- closing 'literal' switch in code... -->\n</p>\n<p><div class=\"lava-code-container\"></p>\n<p><div class=\"lava-code\"></p>\n<p><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1</pre></p>\n<p><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:property_string</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">&quot;value&quot;</span>&gt;</span>&#123;literal:}this is a very {#bad()} string&#123;:literal}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:property_string</span>&gt;</span></pre>\n</div>\n</div>\n</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}