{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"views\">Views</h1>\n<h2 id=\"expression-view\">Expression view</h2>\n<p>Expression view allows you to output a value of any JavaScript expression.\nThis is commonly used short form:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs xml\">{#&gt; ucFirst('liquidLava') + \" is the best framework ever!\" }</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._callGlobalModifier(<span class=\"hljs-string\">\"ucFirst\"</span>, [<span class=\"hljs-string\">'liquidLava'</span>]) + <span class=\"hljs-string\">\" is the best framework ever!\"</span>);\n        },\n        flags: {\n            hasGlobalModifiers: <span class=\"hljs-literal\">true</span>,\n            isStatic: <span class=\"hljs-literal\">true</span>\n        }\n    }\n}]</pre></div></div><p>Standard form example. There must be no content inside the block.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs xml\">{#expression(ucFirst('liquidLava') + \" is the best framework ever!\")}{/expression}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._callGlobalModifier(<span class=\"hljs-string\">\"ucFirst\"</span>, [<span class=\"hljs-string\">'liquidLava'</span>]) + <span class=\"hljs-string\">\" is the best framework ever!\"</span>);\n        },\n        flags: {\n            hasGlobalModifiers: <span class=\"hljs-literal\">true</span>,\n            isStatic: <span class=\"hljs-literal\">true</span>\n        }\n    },\n    template: []\n}]</pre></div></div><p>Example: turn off escaping of HTML entities</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n</pre><pre class=\"lava-code-content hljs xml\">{#expression(\"<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">b</span>&gt;</span>This text will be bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">b</span>&gt;</span>\") escape_off}{/expression}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-string\">\"&lt;b&gt;This text will be bold&lt;/b&gt;\"</span>);\n        },\n        flags: {\n            isStatic: <span class=\"hljs-literal\">true</span>,\n            isString: <span class=\"hljs-literal\">true</span>\n        }\n    },\n    escape_off: <span class=\"hljs-literal\">true</span>,\n    template: []\n}]</pre></div></div><h2 id=\"foreach-view\">Foreach view</h2>\n<p>Foreach view displays the given template for each item from Enumerable, array or an object.\nItems themselves can be anything.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><pre class=\"lava-code-content hljs xml\">{#foreach(['Mary', 'John', 1]) as=name}\n  Hello {#&gt; name}\n{/foreach}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Foreach\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> ([<span class=\"hljs-string\">'Mary'</span>, <span class=\"hljs-string\">'John'</span>, <span class=\"hljs-number\">1</span>]);\n        },\n        flags: {isStatic: <span class=\"hljs-literal\">true</span>}\n    },\n    as: <span class=\"hljs-string\">\"name\"</span>,\n    template: [\n        <span class=\"hljs-string\">\"\\r\\n\\tHello \"</span>,\n        {\n            type: <span class=\"hljs-string\">\"view\"</span>,\n            <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Expression\"</span>,\n            argument: {\n                evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n                    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n                },\n                flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n                binds: [{property_name: <span class=\"hljs-string\">\"name\"</span>}]\n            }\n        },\n        <span class=\"hljs-string\">\"\\r\\n\"</span>\n    ]\n}]</pre></div></div><p>How it works internally: for each item in collection it creates a new instance of <a href=\"/www/doc.html#class=Lava.system.Template\">Lava.system.Template</a>.\n<b>Each view inside that Template instance is assigned the following variables:</b></p>\n<ul>\n<li><span class=\"api-string\">&quot;foreach_index&quot;</span> - refers to item index in collection</li>\n<li><span class=\"api-string\">&quot;foreach_name&quot;</span> - holds current key, when iterating over an object</li>\n<li>current item. Name is specified by <code>as</code> property.</li>\n</ul>\n<p>Once again: Template itself does not implement Properties - these variables are assigned to views, which it owns.\nAnd Foreach view does not hold <span class=\"api-string\">&quot;foreach_index&quot;</span>, <span class=\"api-string\">&quot;foreach_name&quot;</span> and current item properties -\nthey are assigned to views inside the Foreach template. From the previous example: <code>Hello {#&gt; name}</code> - all these \nvariables, including <code>name</code>, will be assigned directly to the Expression view. However, <code>count</code> property belongs to\nForeach view.</p>\n<p>Current item can be accessed with name from <code>as</code> option:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Example controller</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(<span class=\"hljs-string\">'Lava.widget.MyWidget'</span>, {\n    Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>,\n\n    _properties: {\n        sample_object: {\n            name_one: {property: <span class=\"hljs-string\">'value1'</span>},\n            name_two: {property: <span class=\"hljs-string\">'value2'</span>},\n            name_three: {property: <span class=\"hljs-string\">'value3'</span>}\n        }\n    }\n});</pre></div><div class=\"api-code-header api-code-header-blue\">Template</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span> <span class=\"hljs-attribute\">lava-app</span>=<span class=\"hljs-value\">\"MyWidget\"</span>&gt;</span>\n  {#foreach(sample_object) as=record}\n    {#&gt; foreach_index}. Key: {#&gt; foreach_name}. Property: {#&gt; record.property} <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">br</span>/&gt;</span>\n  {/foreach}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></div></div><h2 id=\"if-view\">If view</h2>\n<p>If view (with &quot;elseif&quot; chain) displays the first template, for which it&#39;s argument evaluates to <span class=\"api-keyword\">true</span>.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n</pre><pre class=\"lava-code-content hljs xml\">{#if(score &gt; 100)}\n  Excellent\n{elseif(score &gt; 50)}\n  Good\n{else}\n  Bad\n{/if}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"If\"</span>,\n    argument: {\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue() &gt; <span class=\"hljs-number\">100</span>);\n        },\n        binds: [{property_name: <span class=\"hljs-string\">\"score\"</span>}]\n    },\n    template: [<span class=\"hljs-string\">\"\\r\\n\\tExcellent\\r\\n\"</span>],\n    else_template: [<span class=\"hljs-string\">\"\\r\\n\\tBad\\r\\n\"</span>],\n    elseif_arguments: [{\n        evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue() &gt; <span class=\"hljs-number\">50</span>);\n        },\n        binds: [{property_name: <span class=\"hljs-string\">\"score\"</span>}]\n    }],\n    elseif_templates: [[<span class=\"hljs-string\">\"\\r\\n\\tGood\\r\\n\"</span>]]\n}]</pre></div></div><p>&quot;elseif&quot; and &quot;else&quot; blocks are optional.\nEach template inside the view is assigned <span class=\"api-string\">&quot;if_index&quot;</span> variable, just like templates in Foreach.</p>\n<h2 id=\"view\">View</h2>\n<p>This kind of view does not have an argument or any active functionality.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><pre class=\"lava-code-content hljs xml\">{#view()}\n  ...\n{/view}</pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div><p>Practical usage example: you can give this view a <a href=\"/www/doc.html#class=Lava.view.container.Morph\">Lava.view.container.Morph</a> container\nand wrap views without container inside it. This way, when inner views will need to update -\nonly the content of the Morph container will be refreshed.</p>\n<p>This view is also created for element containers with <code>x:type=&quot;view&quot;</code> attribute:</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><pre class=\"lava-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"lava-control-prefix\">x</span><span class=\"hljs-attribute\">:type</span>=<span class=\"hljs-value\">\"view\"</span>&gt;</span>\n  ...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></div><div class=\"api-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre><pre class=\"lava-code-content hljs javascript\">[{\n    type: <span class=\"hljs-string\">\"view\"</span>,\n    <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"View\"</span>,\n    container: {\n        type: <span class=\"hljs-string\">\"Element\"</span>,\n        tag_name: <span class=\"hljs-string\">\"div\"</span>\n    },\n    template: [<span class=\"hljs-string\">\"\\r\\n\\t...\\r\\n\"</span>]\n}]</pre></div></div><p>See article about <a href=\"/www/doc.html#reference=ElementSyntax\">element syntax</a>.</p>\n<h2 id=\"include-view\">Include view</h2>\n<p>This view allows you to display and dynamically update a template, which is returned as result of an expression. \nYou should not confuse it with common includes.</p>\n<div class=\"lava-code-container lava-code-container-plain\"><div class=\"api-code-header api-code-header-blue\">Script</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre><pre class=\"lava-code-content hljs javascript\">Lava.define(<span class=\"hljs-string\">'Lava.widget.MyWidget'</span>, {\n\n    Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>,\n    name: <span class=\"hljs-string\">'my_widget'</span>,\n\n    _properties: {\n        name: <span class=\"hljs-string\">'World'</span>,\n        dynamic_template: Lava.TemplateParser.parse(<span class=\"hljs-string\">\"{#&gt; 'Hello' + name}\"</span>)\n    }\n});</pre></div><div class=\"api-code-header api-code-header-blue\">Template</div>\n<div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><pre class=\"lava-code-content hljs xml\">{#include($my_widget.dynamic_template)}\n  Default template\n{/include}</pre></div></div><p>View can have a default template, which is used when it&#39;s argument returns <span class=\"api-keyword\">null</span>.</p>\n<p>Tip: you can not put a template directly into <a href=\"/www/doc.html#object=Support;member=_cWidget.properties\">_cWidget#properties</a> - you can assign template to a property \nonly in JavaScript code, not in widget templates. This is due to a reason that view configs must be traversable \n(they must have predictable structure). But templates can be taken from widget&#39;s storage - for an example see \n<a href=\"/www/doc.html#class=Lava.widget.Tabs\">Lava.widget.Tabs</a> or <a href=\"/www/doc.html#class=Lava.widget.Accordion\">Lava.widget.Accordion</a>.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}