var page_json = {
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"x-assign-directive\">x:assign directive</h1>\n<table class=\"api-member-table doc-directive-quick-facts\"><thead><tr><td>Quick facts</td><td></td></tr></thead><tbody><tr><td>Has analog in widget definition tags</td><td>Yes</td></tr><tr><td>Produces result</td><td>No</td></tr><tr><td>Widget only directive</td><td>No</td></tr><tr><td>Multiple usage</td><td>Allowed</td></tr></tbody></table>\n\n\n\n<p>Directive sets <a href=\"/www/doc/object/Support.html#member=_cView.assigns\">_cView#assigns</a> for view or widget config.</p>\n<h2 id=\"example\">Example</h2>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">checkbox</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:assign</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"is_checked\"</span>&gt;</span>node.is_checked<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:assign</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">checkbox</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  type: <span class=\"hljs-string\">\"widget\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n  extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n  <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"CheckBox\"</span>,\n  assigns: {\n    is_checked: {\n      evaluator: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>._binds[<span class=\"hljs-number\">0</span>].getValue());\n      },\n      flags: {isScopeEval: <span class=\"hljs-literal\">true</span>},\n      binds: [{\n        property_name: <span class=\"hljs-string\">\"node\"</span>,\n        tail: [<span class=\"hljs-string\">\"is_checked\"</span>]\n      }]\n    }\n  }\n}]</pre></div></div></div><p>Directive content can be any valid expression.</p>\n<p>You can set assigns in x:define via &lt;assigns&gt; tag, but it&#39;s recommended to move them to inline widget definition.</p>\n<h2 id=\"once-attribute\">Once attribute</h2>\n<p>Assign supports an optional attribute <code>once</code> - when it&#39;s set, expression result will be evaluated and assigned only once\nin view constructor.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:assign</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"is_checked\"</span> <span class=\"hljs-attribute\">once</span>=<span class=\"hljs-value\">\"true\"</span>&gt;</span>node.is_checked<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:assign</span>&gt;</span></pre></div></div></div><h2 id=\"architecture\">Architecture</h2>\n<p>Assigns are supported by <a href=\"/www/doc/class/Lava.scope.PropertyBinding.html\">Lava.scope.PropertyBinding</a> class - it creates an Argument from assign config,\nand updates it&#39;s own value when argument changes. Assigns are created in view constructor, \nbefore any other PropertyBinding instances.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}