{
	type: "widget",
	is_extended: true,
	template: ["<h1 id=\"packages\">Packages</h1>\n<p>When you create a widget - you don&#39;t need it to be one monolithic class:\nyou can create some helper views or widgets, which will be used by main widget.\nBut your class names are hardcoded in your templates, so when people extend your classes - \nthey will also be faced with the need to rewrite the templates. </p>\n<p>Packages allow you to determine class name dynamically, without changing templates.</p>\n<h2 id=\"packages-in-classmanager\">Packages in ClassManager</h2>\n<p>Slash is allowed in class names - it allows you to create a &quot;package&quot;.\nExample below defines a widget &quot;ExistingWidget&quot;, and a view &quot;ExistingWidget/ExistingView&quot;.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.define(<span class=\"hljs-string\">'Lava.widget.ExistingWidget'</span>, {\n    Extends: <span class=\"hljs-string\">'Lava.widget.Standard'</span>\n});\n\nLava.define(<span class=\"hljs-string\">'Lava.widget.ExistingWidget/ExistingView'</span>, {\n    Extends: <span class=\"hljs-string\">'Lava.view.View'</span>\n});</pre></div></div></div><p>Let&#39;s say, that you want to extend this widget with your own functionality:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">Lava.define(<span class=\"hljs-string\">'Lava.widget.MyWidget'</span>, {\n    Extends: <span class=\"hljs-string\">'Lava.widget.ExistingWidget'</span>\n});\n\nLava.define(<span class=\"hljs-string\">'Lava.widget.MyWidget/ExistingView'</span>, {\n    Extends: <span class=\"hljs-string\">'Lava.widget.ExistingWidget/ExistingView'</span>\n});</pre></div></div></div><p>Note that &quot;/ExistingView&quot; part has not changed and remains the same.</p>\n<p>Now you want to get constructor of the topmost overridden version of &quot;ExistingView&quot; from &quot;MyWidget&quot;. \nIn other words, you know that MyWidget exists, but you don&#39;t know if &quot;MyWidget/ExistingView&quot; exists.</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-comment\">// arguments: top_parent_path, suffix</span>\n<span class=\"hljs-keyword\">var</span> constructor = Lava.ClassManager.getPackageConstructor(<span class=\"hljs-string\">'Lava.widget.MyWidget'</span>, <span class=\"hljs-string\">'/ExistingView'</span>);</pre></div></div></div><p><a href=\"/www/doc.html#object=Lava.ClassManager;member=getPackageConstructor\">ClassManager#getPackageConstructor</a> builds a list of &quot;MyWidget&quot; and it&#39;s parent classes,\nand attaches the &quot;/ExistingView&quot; suffix to them:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs text\">Lava.widget.MyWidget/ExistingView\nLava.widget.ExistingWidget/ExistingView\nLava.widget.Standard/ExistingView\nLava.view.View/ExistingView\n...</pre></div></div></div><p>Then it returns the first class that exists. </p>\n<h2 id=\"dynamic-class-name-resolution\">Dynamic class name resolution</h2>\n<p>There is special syntax for templates and another kind of gateway, \nwhich allows you do define views and widgets with dynamic class names - <a href=\"/www/doc.html#object=Lava;member=ClassLocatorGateway\">Lava#ClassLocatorGateway</a>. \nThe following example expects, that MyApp class has <a href=\"/www/doc.html#class=Lava.widget.Standard;member=name\">Standard#name</a> <span class=\"api-string\">&quot;my_app&quot;</span>:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary \"><div class=\"lava-new-code-header api-code-header-blue\">Template source</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"MyApp\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">x:widget</span> <span class=\"hljs-attribute\">controller</span>=<span class=\"hljs-value\">\"$my_app/MyWidget\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span>\n    {#:$my_app/MyView()}\n    {/MyView}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">x:widget</span>&gt;</span></pre></div></div><div class=\"lava-new-code-header api-code-header-blue\">Parse result</div>\n<div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\">[{\n  template: [\n    <span class=\"hljs-string\">\"\\r\\n\\t\\t\"</span>,\n    {\n      real_class: <span class=\"hljs-string\">\"/MyWidget\"</span>,\n      class_locator: {\n        locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n        name: <span class=\"hljs-string\">\"my_app\"</span>\n      },\n      <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n      extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n      type: <span class=\"hljs-string\">\"widget\"</span>\n    },\n    <span class=\"hljs-string\">\"\\r\\n\\t\\t\"</span>,\n    {\n      type: <span class=\"hljs-string\">\"view\"</span>,\n      <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.ClassLocatorGateway\"</span>,\n      class_locator: {\n        locator_type: <span class=\"hljs-string\">\"Name\"</span>,\n        name: <span class=\"hljs-string\">\"my_app\"</span>\n      },\n      real_class: <span class=\"hljs-string\">\"/MyView\"</span>,\n      template: [<span class=\"hljs-string\">\"\\r\\n\\t\\t\"</span>]\n    },\n    <span class=\"hljs-string\">\"\\r\\n\\t\"</span>\n  ],\n  real_class: <span class=\"hljs-string\">\"MyApp\"</span>,\n  <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"Lava.WidgetConfigExtensionGateway\"</span>,\n  extender_type: <span class=\"hljs-string\">\"Standard\"</span>,\n  type: <span class=\"hljs-string\">\"widget\"</span>\n}]</pre></div></div></div><p>In case of the above syntax - the <code>class</code> of widget configs becomes <a href=\"/www/doc.html#object=Lava;member=ClassLocatorGateway\">Lava#ClassLocatorGateway</a> after extension.\nView configs have it as class right after template compilation.</p>\n<p>What ClassLocatorGateway does:</p>\n<ul>\n<li>searches the hierarchy up and finds the widget. In this case, a widget with name <span class=\"api-string\">&quot;my_app&quot;</span></li>\n<li>calls <a href=\"/www/doc.html#class=Lava.widget.Standard;member=getPackageConstructor\">Standard#getPackageConstructor</a> of that widget, and receives the exact constructor from it</li>\n<li>creates the class instance and returns it</li>\n</ul>\n<p>ClassLocatorGateway can not be replaced with real class cause of config inheritance: \nthe same template may be used inside different widgets, with different classes, \nand they could return different constructors.</p>\n<p>Widget&#39;s <a href=\"/www/doc.html#class=Lava.widget.Standard;member=getPackageConstructor\">Standard#getPackageConstructor</a> calls <a href=\"/www/doc.html#object=Lava.ClassManager;member=getPackageConstructor\">ClassManager#getPackageConstructor</a> by default.</p>\n<p>If your widget uses functionality of your other widgets - it&#39;s recommended to use dynamic class names - \nthis way you will not need to rewrite your templates, when you extend them.</p>\n"],
	container: {
		type: "Element",
		tag_name: "div"
	}
}