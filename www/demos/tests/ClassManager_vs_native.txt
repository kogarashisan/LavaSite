http://jsperf.com/liquidlava-class-system-performance/4
===

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="http://lava-framework.com/lib/lava-master-DEV.js"></script>

<script>
// create classes in traditional way
function NativeParentClass() { this.counter = 0; }
NativeParentClass.prototype.parentMethod = function() { this.counter++; }

function NativeChildClass() {}
NativeChildClass.prototype = new NativeParentClass();
NativeChildClass.prototype.childMethod = function() { this.parentMethod(); }

var NativeInstance = new NativeChildClass();

// Create classes via Lava.ClassManager
Lava.ClassManager.registerRootNamespace('window', window);
Lava.ClassManager.define(
'window.LavaParentClass',
{
    counter: 0,
    parentMethod: function() { this.counter++; }
});

Lava.ClassManager.define(
'window.LavaChildClass',
{
    Extends: 'window.LavaParentClass',
    childMethod: function() { this.parentMethod(); }
});

var LavaInstance = new LavaChildClass();

// the same classes, but generated on server
Lava.ClassManager.loadClass({
        name: "LavaServerParent",
        path: "window.LavaServerParent",
        level: 0,
        "extends": null,
        "implements": [],
        hierarchy_paths: ["window.LavaServerParent"],
        parent_class_data: null,
        prototype_generator: function(cd,p) {
                var r=cd.references,
                s=cd.shared;
                p.Class = cd;
                p.counter = 0;
                p.parentMethod = r[0];
        },
        shared: {},
        references: [function () { this.counter++; }],
        constructor: function() {
                var r=Lava.ClassManager.getClassData('window.LavaServerParent').references;
        }
});

Lava.ClassManager.loadClass({
        name: "LavaServerChild",
        path: "window.LavaServerChild",
        level: 1,
        "extends": "window.LavaServerParent",
        "implements": [],
        hierarchy_paths: [
                "window.LavaServerParent",
                "window.LavaServerChild"
        ],
        parent_class_data: null,
        prototype_generator: function(cd,p) {
                var r=cd.references,
                s=cd.shared;
                p.Class = cd;
                p.childMethod = r[1];
                p.counter = 0;
                p.parentMethod = r[0];
        },
        shared: {},
        references: [function () { this.parentMethod(); }],
        constructor: function() {
                var r=Lava.ClassManager.getClassData('window.LavaServerChild').references;
        }
});

var ServerInstance = new LavaServerChild();
</script>