var page_json = {"description":"<p>All DOM manipulation should be done with Firestorm. If functionality is present in Firestorm - \nyou should use it, rather then calling iQuery directly.</p>\n<p>For example, if property of a DOM element has accessor in Firestorm, like <code>Firestorm.Element.getOuterHTML()</code> - \nthen you should use that method. If property has <code>attributeNode</code> - then use <code>Firestorm.Element.getProperty()</code> - \nmost properties are accessible with this method.</p>\n<p>However, there are element fields, that should be accessed directly. They include:</p>\n<ul>\n<li><code>focus()</code> and <code>blur()</code> methods (although, using <code>blur()</code> is not recommended by W3C)</li>\n<li>core DOM properties that work in all browsers, like <code>offsetHeight</code>, <code>parentNode</code> and <code>firstChild</code></li>\n</ul>\n<p>Be aware, that over time framework will become independent from jQuery, and you will not need to include it anymore.</p>\n<h2 id=\"advanced-topics\">Advanced topics</h2>\n<p>Some browsers do not iterate over overwritten Object&#39;s prototype properties. Example from MooTools library:</p>\n<div class=\"lava-new-code-container lava-new-code-container-primary\"><div class=\"lava-new-code-box\"><pre class=\"lava-new-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n</pre><div class=\"lava-new-code-overlays\"><pre class=\"lava-new-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> enumerables = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> {toString: <span class=\"hljs-number\">1</span>}) enumerables = <span class=\"hljs-literal\">null</span>;</pre></div></div></div><p>In most browsers <code>enumerables</code> will be null (browser iterates over &#39;toString&#39;), but it&#39;s not safe to rely on this behaviour.\nFirestorm does not provide a fix for this issue in any form, so either:</p>\n<ul>\n<li>do not override Object&#39;s prototype properties - from architect&#39;s point of view it&#39;s the best solution</li>\n<li>or implement the fix yourself. See overloadSetter function from MooTools as example</li>\n</ul>\n<p>See also: <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Object.prototype</a>\non MDN.</p>\n","member_chain":[{"descriptors":[{"name":"$","is_private":false,"type":"member","default_value":"<span class=\"api-keyword\">null</span>"},{"name":"CAPABILITY_NAMES","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["number"]},{"name":"ERROR_DESCRIPTIONS","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;number, string&gt;"],"description":"<p>The map of numbered exception messages. May be excluded from production build</p>\n"},{"name":"KEY_CODES","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["number"],"description":"<p>Browser key codes from keyboard events</p>\n"},{"name":"_descriptor_to_type","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;string, string&gt;"],"description":"<p>Used by <a href=\"/www/doc/object/Firestorm.html#member=getType\">Firestorm#getType</a></p>\n"}]}],"method_chain":[{"descriptors":[{"name":"clone","is_private":false,"type":"function","params":[{"name":"value","type_names":["*"]}],"param_names_string":"value","returns":{"type_names":["*"]},"description":"<p>Deep clone of given value</p>\n"},{"name":"defaultLess","is_private":false,"type":"function","param_names_string":"a, b","returns":{"type_names":["boolean"]},"description":"<p>Default comparison function</p>\n"},{"name":"extend","is_private":false,"type":"function","params":[{"name":"base","type_names":["Object"]},{"name":"partial","type_names":["Object"]}],"param_names_string":"base, partial","description":"<p>Copy all properties from <code>partial</code> to <code>base</code></p>\n"},{"name":"false","is_private":false,"type":"function","returns":{"description":"<p><span class=\"api-keyword\">false</span></p>\n","type_names":["boolean"]},"description":"<p>Return <span class=\"api-keyword\">false</span></p>\n"},{"name":"getElementById","is_private":false,"type":"function","params":[{"name":"id","type_names":["string"]}],"param_names_string":"id","returns":{"type_names":["HTMLElement"]},"description":"<p>Get HTML element by it&#39;s id attribute</p>\n"},{"name":"getElementsByTagName","is_private":false,"type":"function","params":[{"name":"tag_name","type_names":["string"]}],"param_names_string":"tag_name","returns":{"type_names":["NodeList"]},"description":"<p>Get all elements with given tag name</p>\n"},{"name":"getType","is_private":false,"type":"function","params":[{"name":"value","description":"<p>Any value</p>\n","type_names":["*"]}],"param_names_string":"value","returns":{"description":"<p>The type name, like &quot;null&quot;, &quot;object&quot; or &quot;regex&quot;</p>\n","type_names":["string"]},"description":"<p>Get actual type of any JavaScript value</p>\n"},{"name":"implement","is_private":false,"type":"function","params":[{"name":"base","type_names":["Object"]},{"name":"partial","type_names":["Object"]}],"param_names_string":"base, partial","description":"<p>Copy all properties from <code>partial</code> to <code>base</code>, but do not overwrite existing properties</p>\n"},{"name":"init","is_private":false,"type":"function","description":"<p>Framework must be initialized before it can be used</p>\n"},{"name":"onDocumentReady","is_private":false,"type":"function","param_names_string":"handler"},{"name":"selectElements","is_private":false,"type":"function","params":[{"name":"selector","description":"<p>CSS selector</p>\n","type_names":["string"]}],"param_names_string":"selector","returns":{"type_names":["Array.&lt;HTMLElement&gt;"]},"description":"<p>Return all elements which match the given selector</p>\n"},{"name":"t","is_private":false,"type":"function","params":[{"name":"message","description":"<p>Exception message</p>\n","is_optional":true}],"param_names_string":"message","description":"<p>Throw an exception</p>\n"},{"name":"true","is_private":false,"type":"function","returns":{"description":"<p><span class=\"api-keyword\">true</span></p>\n","type_names":["boolean"]},"description":"<p>Return <span class=\"api-keyword\">true</span></p>\n"}]}]}