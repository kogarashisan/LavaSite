{"description":"<p>The only purpose of Core is to delegate DOM events from <span class=\"api-var\">window</span> to other classes. Usage example:</p>\n<div class=\"lava-code-container\"><div class=\"lava-code\"><pre class=\"lava-code-line-numbers\">&nbsp;&nbsp;1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n</pre><pre class=\"lava-code-content hljs javascript\"><span class=\"hljs-keyword\">var</span> demo_receiver = {\n    onMouseMove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> {</span>\n        console.log(<span class=\"hljs-string\">'mouse moved'</span>);\n    }\n};\n\n<span class=\"hljs-comment\">// mousemove is expensive event, so it's not delegated by default</span>\n<span class=\"hljs-keyword\">var</span> mousemove_listener = Lava.Core.addGlobalHandler(<span class=\"hljs-string\">'mousemove'</span>, demo_receiver.onMouseMove, demo_receiver);\n<span class=\"hljs-comment\">// you should release it as soon as you don't need it</span>\nLava.Core.removeGlobalHandler(mousemove_listener);</pre></div></div><h2 id=\"architecture-notes\">Architecture notes</h2>\n<p>Core adds listeners to the global <span class=\"api-var\">window</span> object, one listener for each active event.\nEvery event listener ends with a call to <code>Lava.view_manager.refresh()</code> - this refreshes scopes and views\n(there will be only one refresh cycle, even if there are several consumers for an event).</p>\n","member_chain":[{"descriptors":[{"name":"_dom_event_support","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;string, Object&gt;"],"description":"<p>Map of events that require special support from Core\nNote: IE8 and below are not fully supported</p>\n"},{"name":"_event_handlers","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-empty\">{ }</span>","type_names":["Object.&lt;string, Array.&lt;<a href=\"/www/doc.html#object=Support;member=_tListener\">_tListener</a>&gt;&gt;"],"description":"<p>Framework listeners</p>\n"},{"name":"_event_listeners","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-empty\">{ }</span>","type_names":["Object.&lt;string, function()&gt;"],"description":"<p>Core&#39;s own handlers, which then call attached listeners</p>\n"},{"name":"_event_usage_counters","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-empty\">{ }</span>","type_names":["Object.&lt;string, number&gt;"],"description":"<p>Event listeners are attached only once to the window, and released when they are not needed anymore</p>\n"},{"name":"_freeze_protected_events","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">[ ... ]</span>","type_names":["Array.&lt;string&gt;"],"description":"<p>In case of infinite loops in scope layer, there may be lags, when processing mousemove and other frequent events</p>\n"},{"name":"_is_processing_event","is_private":true,"type":"member","default_value":"<span class=\"api-keyword\">false</span>","type_names":["boolean"],"description":"<p>Is set at the beginning of Core&#39;s DOM event listener and removed at the end. Used to delay refresh of views\nuntil the end of event processing</p>\n"}]}],"method_chain":[{"descriptors":[{"name":"_createEventWrapper","is_private":true,"type":"function","params":[{"name":"event_name","description":"<p>DOM event name</p>\n","type_names":["string"]}],"param_names_string":"event_name","returns":{"type_names":["function"]},"description":"<p>Used to bind <code>_onDomEvent</code> to Core instance</p>\n"},{"name":"_initEvent","is_private":true,"type":"function","params":[{"name":"event_name","description":"<p>DOM event name</p>\n","type_names":["string"]}],"param_names_string":"event_name","description":"<p>Attach a listener to window object, start listening to the event</p>\n"},{"name":"_onDomEvent","is_private":true,"type":"function","params":[{"name":"event_name","description":"<p>DOM event name</p>\n","type_names":["string"]},{"name":"event_object","description":"<p>Event object, returned by low-level framework</p>\n","type_names":["Object"]},{"name":"freeze_protection","description":"<p>Is this a frequent event, which may cause lags</p>\n","type_names":["boolean"]}],"param_names_string":"event_name, event_object, freeze_protection","description":"<p>Actual listener for DOM events. Calls framework listeners, attached via <a href=\"/www/doc.html#object=Lava.Core;member=addGlobalHandler\">Core#addGlobalHandler</a></p>\n"},{"name":"_shutdownEvent","is_private":true,"type":"function","params":[{"name":"event_name","description":"<p>DOM event name</p>\n","type_names":["string"]}],"param_names_string":"event_name","description":"<p>Stop listening to DOM event</p>\n"},{"name":"addGlobalHandler","is_private":false,"type":"function","params":[{"name":"event_name","description":"<p>Name of DOM event</p>\n","type_names":["string"]},{"name":"fn","description":"<p>Callback</p>\n","type_names":["function"]},{"name":"context","description":"<p>Callback owner</p>\n","type_names":["Object"]}],"param_names_string":"event_name, fn, context","returns":{"description":"<p>The listener structure, similar to <a href=\"/www/doc.html#class=Lava.mixin.Observable;member=on\">Observable#on</a> result</p>\n","type_names":["<a href=\"/www/doc.html#object=Support;member=_tListener\">_tListener</a>"]},"description":"<p>Add a listener for DOM event. Similar to <a href=\"/www/doc.html#class=Lava.mixin.Observable;member=on\">Observable#on</a></p>\n"},{"name":"isProcessingEvent","is_private":false,"type":"function","returns":{"description":"<p>True, if Core is in the process of calling framework listeners</p>\n","type_names":["boolean"]},"description":"<p>Get <code>_is_processing_event</code></p>\n"},{"name":"removeGlobalHandler","is_private":false,"type":"function","params":[{"name":"listener","description":"<p>Listener structure</p>\n","type_names":["<a href=\"/www/doc.html#object=Support;member=_tListener\">_tListener</a>"]}],"param_names_string":"listener","description":"<p>Release the listener, acquired via call to <a href=\"/www/doc.html#object=Lava.Core;member=addGlobalHandler\">Core#addGlobalHandler</a></p>\n"}]}]}