{"method_chain":[{"descriptors":[{"name":"_findChildById","is_private":true,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"id","type_names":["string"]}],"param_names_string":"element, id","returns":{"type_names":["HTMLElement"]},"description":"<p>Perform search by id for <a href=\"/www/doc.html#object=Firestorm.Element;member=findChildById\">Element#findChildById</a></p>\n"},{"name":"addClass","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"class_name","description":"<p>The class name to add</p>\n","type_names":["string"]}],"param_names_string":"element, class_name","description":"<p>Add another class to collection of element&#39;s classes. Will not do anything, if class already exists</p>\n"},{"name":"addClasses","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"class_list","type_names":["Array.&lt;string&gt;"]}],"param_names_string":"element, class_list","description":"<p>Add a list of classes to element</p>\n"},{"name":"addDelegation","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"event_name","type_names":["string"]},{"name":"selector","description":"<p>CSS selector</p>\n","type_names":["string"]},{"name":"callback","type_names":["function"]}],"param_names_string":"element, event_name, selector, callback","description":"<p>Route events from elements inside <code>element</code> that match the <code>selector</code></p>\n"},{"name":"addListener","is_private":false,"type":"function","params":[{"name":"element","description":"<p>The DOM element for attaching the event</p>\n","type_names":["HTMLElement"]},{"name":"event_name","description":"<p>Name of DOM event</p>\n","type_names":["string"]},{"name":"callback","description":"<p>Callback for the listener</p>\n","type_names":["function"]},{"name":"capture","description":"<p>Use capturing phase</p>\n","type_names":["boolean"]}],"param_names_string":"element, event_name, callback, capture","description":"<p>Attach DOM listener to an element</p>\n"},{"name":"destroy","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]}],"param_names_string":"element","description":"<p>Remove an element from DOM and clean all framework dependencies on that element.\nDestroyed elements cannot be reused</p>\n"},{"name":"findChildById","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"id","type_names":["string"]}],"param_names_string":"element, id","returns":{"type_names":["HTMLElement"]},"description":"<p>Traverse element&#39;s children and find a child with given <code>id</code></p>\n"},{"name":"getAttribute","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","description":"<p>Attribute name</p>\n","type_names":["string"]}],"param_names_string":"element, name","returns":{"description":"<p>The attribute value</p>\n","type_names":["string"]},"description":"<p>Get attribute value from the element</p>\n"},{"name":"getOpacity","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]}],"param_names_string":"element","returns":{"type_names":["*"]},"description":"<p>Get element&#39;s opacity</p>\n"},{"name":"getProperty","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","type_names":["string"]}],"param_names_string":"element, name","returns":{"type_names":["*"]},"description":"<p>Get element&#39;s property</p>\n"},{"name":"getSize","is_private":false,"type":"function","params":[{"name":"element"}],"param_names_string":"element","returns":{"description":"<p>An object with element&#39;s dimensions</p>\n","type_names":["Object"]},"description":"<p>Get element&#39;s dimensions</p>\n"},{"name":"getStyle","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","description":"<p>Name of the property, like <span class=\"api-string\">&quot;height&quot;</span></p>\n","type_names":["string"]}],"param_names_string":"element, name","returns":{"type_names":["*"]},"description":"<p>Get value of CSS style property</p>\n"},{"name":"getTagName","is_private":false,"type":"function","param_names_string":"element"},{"name":"hasAttribute","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","description":"<p>Attribute name</p>\n","type_names":["string"]}],"param_names_string":"element, name","returns":{"description":"<p>True, if attribute exists</p>\n","type_names":["boolean"]},"description":"<p>Does an element have an attribute</p>\n"},{"name":"insertElement","is_private":false,"type":"function","params":[{"name":"parent","type_names":["HTMLElement"]},{"name":"element","type_names":["HTMLElement"]},{"name":"where","type_names":["<a href=\"/www/doc.html#object=Support;member=_eInsertPosition\">_eInsertPosition</a>"]}],"param_names_string":"parent, element, where","description":"<p>Insert an element relatively to <code>parent</code> element</p>\n"},{"name":"insertElementAfter","is_private":false,"type":"function","params":[{"name":"context","type_names":["HTMLElement"]},{"name":"target_element","description":"<p>Element that is being inserted</p>\n","type_names":["HTMLElement"]}],"param_names_string":"context, target_element","description":"<p>Insert <code>target_element</code> after <code>context</code></p>\n"},{"name":"insertElementBefore","is_private":false,"type":"function","params":[{"name":"context","type_names":["HTMLElement"]},{"name":"target_element","description":"<p>Element that is being inserted</p>\n","type_names":["HTMLElement"]}],"param_names_string":"context, target_element","description":"<p>Insert <code>target_element</code> just before <code>context</code></p>\n"},{"name":"insertElementBottom","is_private":false,"type":"function","params":[{"name":"parent","type_names":["HTMLElement"]},{"name":"element","type_names":["HTMLElement"]}],"param_names_string":"parent, element","description":"<p>Insert an element inside <code>parent</code>, at the bottom of it</p>\n"},{"name":"insertElementTop","is_private":false,"type":"function","params":[{"name":"parent","type_names":["HTMLElement"]},{"name":"element","type_names":["HTMLElement"]}],"param_names_string":"parent, element","description":"<p>Insert an element inside <code>parent</code>, at the top of it</p>\n"},{"name":"remove","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]}],"param_names_string":"element","description":"<p>Remove the element from DOM tree. After removal it may be inserted back</p>\n"},{"name":"removeClass","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"class_name","type_names":["string"]}],"param_names_string":"element, class_name","description":"<p>Remove a class from the list of element&#39;s classes. Will do nothing, if class does not exist</p>\n"},{"name":"removeClasses","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"class_list","type_names":["Array.&lt;string&gt;"]}],"param_names_string":"element, class_list","description":"<p>Remove a list of classes from an element</p>\n"},{"name":"removeDelegation","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"event_name","type_names":["string"]},{"name":"selector","description":"<p>CSS selector</p>\n","type_names":["string"]},{"name":"callback","type_names":["function"]}],"param_names_string":"element, event_name, selector, callback","description":"<p>Stop delegating events</p>\n"},{"name":"removeListener","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"event_name","type_names":["string"]},{"name":"callback","type_names":["function"]}],"param_names_string":"element, event_name, callback","description":"<p>Detach DOM listener</p>\n"},{"name":"removeProperty","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","type_names":["string"]}],"param_names_string":"element, name","description":"<p>Remove property from the element</p>\n"},{"name":"selectElements","is_private":false,"type":"function","params":[{"name":"element","description":"<p>Root element</p>\n","type_names":["HTMLElement"]},{"name":"selector","description":"<p>CSS selector</p>\n","type_names":["string"]}],"param_names_string":"element, selector","returns":{"type_names":["Array.&lt;HTMLElement&gt;"]},"description":"<p>Get elements, that are children of <code>element</code> and match the given <code>selector</code></p>\n"},{"name":"setOpacity","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"value","description":"<p>0 &lt;= value &lt;= 1</p>\n","type_names":["string","number"]}],"param_names_string":"element, value","description":"<p>Set element&#39;s opacity</p>\n"},{"name":"setPixels","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","type_names":["string"]},{"name":"value","type_names":["Array.&lt;(number)&gt;"]}],"param_names_string":"element, name, value","description":"<p>Set CSS property, which accepts a list of pixel values (like <span class=\"api-string\">&quot;border: 1px 2px 3px 4px&quot;</span>)\nRounds numbers and adds &#39;px&#39; before setting them to element</p>\n"},{"name":"setProperty","is_private":false,"type":"function","params":[{"name":"element","description":"<p>Target element</p>\n","type_names":["HTMLElement"]},{"name":"name","description":"<p>Property name</p>\n","type_names":["string"]},{"name":"value","description":"<p>Property value</p>\n","type_names":["*"]}],"param_names_string":"element, name, value","description":"<p>Set a property on an element</p>\n"},{"name":"setStyle","is_private":false,"type":"function","params":[{"name":"element","type_names":["HTMLElement"]},{"name":"name","type_names":["string"]},{"name":"value","type_names":["string"]}],"param_names_string":"element, name, value","description":"<p>Set one CSS property in element&#39;s &quot;style&quot; attribute</p>\n"}]}]}