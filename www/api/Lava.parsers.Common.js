{"member_chain":[{"descriptors":[{"name":"UNQUOTE_ESCAPE_REGEX","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">/ ... /</span>","description":"<p>Same as regex in <a href=\"/www/doc.html#object=Firestorm.String\">Firestorm.String</a>, but without quotes and backslash</p>\n"},{"name":"_allowed_control_attributes","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">[ ... ]</span>","type_names":["Array.&lt;string&gt;"],"description":"<p>Allowed &quot;x:&quot; attributes on elements</p>\n"},{"name":"_allowed_hash_options","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">[ ... ]</span>","type_names":["Array.&lt;string&gt;"],"description":"<p>The only allowed options on view&#39;s hash</p>\n"},{"name":"_compile_handlers","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;string, string&gt;"],"description":"<p>For each type of item in raw templates: callbacks that return it&#39;s &quot;compiled&quot; version</p>\n"},{"name":"_identifier_regex","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">/ ... /</span>","type_names":["RegExp"],"description":"<p>Valid name of a variable</p>\n"},{"name":"_locator_regex","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">/ ... /</span>","description":"<p>A widget locator with a name (<code>_identifier_regex</code>) after dot. Examples: <span class=\"api-string\">&quot;@accordion.accordion_panel&quot;</span>,\n<span class=\"api-string\">&quot;$tree.Tree$node&quot;</span>.</p>\n"},{"name":"_reserved_labels","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">[ ... ]</span>","type_names":["Array.&lt;string&gt;"],"description":"<p>Words, that cannot be used as a label</p>\n"},{"name":"_view_config_property_setters","is_private":true,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;string, string&gt;"],"description":"<p>Special setters for some properties in view config</p>\n"},{"name":"locator_types","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","type_names":["Object.&lt;string, string&gt;"],"description":"<p>When widgets are referenced in expressions - they are prefixed with these special characters, which define the kind of reference</p>\n"}]}],"method_chain":[{"descriptors":[{"name":"_assertControlAttributesValid","is_private":true,"type":"function","params":[{"name":"x","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawX\">_cRawX</a>"]}],"param_names_string":"x","description":"<p>Check validity of control attributes and throw exception, in case they are invalid</p>\n"},{"name":"_compileBlock","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_block","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawBlock\">_cRawBlock</a>"]}],"param_names_string":"result, raw_block","description":"<p>Compile raw block (represents a view)</p>\n"},{"name":"_compileContainer","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, raw_tag","description":"<p>Compile raw tag with x:type=&quot;container&quot;. Extract the wrapped view and set this tag as it&#39;s container</p>\n"},{"name":"_compileDirective","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"directive","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawDirective\">_cRawDirective</a>"]},{"name":"view_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]}],"param_names_string":"result, directive, view_config","description":"<p>Compile a raw directive. Directives either produce widget configs, or modify the config of their parent view</p>\n"},{"name":"_compileExpression","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_expression","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawExpression\">_cRawExpression</a>"]}],"param_names_string":"result, raw_expression","description":"<p>Compile raw expression view. Will produce a view config with class=&quot;Expression&quot;</p>\n"},{"name":"_compileInclude","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"include_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cInclude\">_cInclude</a>"]}],"param_names_string":"result, include_config","description":"<p>Compile raw include (push as is)</p>\n"},{"name":"_compileStaticContainer","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, raw_tag","description":"<p>Compile tag with x:type=&quot;static&quot;</p>\n"},{"name":"_compileString","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"string","type_names":["string"]}],"param_names_string":"result, string","description":"<p>Compile raw string (push or append to the last string in result)</p>\n"},{"name":"_compileSugar","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, raw_tag","description":"<p>Compile a tag which belongs to widget&#39;s sugar. Parse it into tag config using <a href=\"/www/doc.html#class=Lava.system.Sugar\">Lava.system.Sugar</a> class instance</p>\n"},{"name":"_compileTag","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, tag","description":"<p>Serialize the tag back into text</p>\n"},{"name":"_compileView","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, raw_tag","description":"<p>Compile raw tag with x:type=&quot;view&quot;. Will produce a <a href=\"/www/doc.html#class=Lava.view.View\">Lava.view.View</a> with an Element container</p>\n"},{"name":"_compileWidget","is_private":true,"type":"function","params":[{"name":"result","type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"result, raw_tag","description":"<p>Compile tag with x:widget=&quot;WidgetName&quot;. Represents a widget with explicitly defined Element container</p>\n"},{"name":"_parseBindingsHash","is_private":true,"type":"function","params":[{"name":"hash","type_names":["Object.&lt;string, string&gt;"]}],"param_names_string":"hash","returns":{"type_names":["Object.&lt;string, <a href=\"/www/doc.html#object=Support;member=_cArgument\">_cArgument</a>&gt;"]},"description":"<p>Parse object as [name] =&gt; &lt;expression&gt; pairs</p>\n"},{"name":"_parseContainerControlAttributes","is_private":true,"type":"function","params":[{"name":"container_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cElementContainer\">_cElementContainer</a>"]},{"name":"x","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawX\">_cRawX</a>"]}],"param_names_string":"container_config, x","description":"<p>Take raw control attributes, parse them, and store in <code>container_config</code></p>\n"},{"name":"_parseContainerStaticAttributes","is_private":true,"type":"function","params":[{"name":"container_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cElementContainer\">_cElementContainer</a>"]},{"name":"raw_attributes","type_names":["Object.&lt;string, string&gt;"]}],"param_names_string":"container_config, raw_attributes","description":"<p>Fills the following properties of the container: static_styles, static_classes and static_properties</p>\n"},{"name":"_parseViewAttributes","is_private":true,"type":"function","params":[{"name":"view_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]},{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"view_config, raw_tag","description":"<p>Assign some attributes of an element to <code>view_config</code></p>\n"},{"name":"_parseViewHash","is_private":true,"type":"function","params":[{"name":"view_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]},{"name":"raw_hash","type_names":["Object"]}],"param_names_string":"view_config, raw_hash","description":"<p>Store values from view&#39;s hash as config properties</p>\n"},{"name":"_toContainer","is_private":true,"type":"function","params":[{"name":"raw_tag","type_names":["<a href=\"/www/doc.html#object=Support;member=_cRawTag\">_cRawTag</a>"]}],"param_names_string":"raw_tag","returns":{"type_names":["<a href=\"/www/doc.html#object=Support;member=_cElementContainer\">_cElementContainer</a>"]},"description":"<p>Convert raw tag to an Element container config</p>\n"},{"name":"_viewNameToClass","is_private":true,"type":"function","params":[{"name":"name","type_names":["string"]}],"param_names_string":"name","returns":{"type_names":["string"]},"description":"<p>Translate name of the view to name of it&#39;s class</p>\n"},{"name":"asBlockType","is_private":false,"type":"function","params":[{"name":"blocks","type_names":["Array"]},{"name":"type","type_names":["string"]}],"param_names_string":"blocks, type","returns":{"type_names":["Array"]},"description":"<p>Extract blocks/tags from template and assert they all have specific type</p>\n"},{"name":"asBlocks","is_private":false,"type":"function","params":[{"name":"template","type_names":["<a href=\"/www/doc.html#object=Support;member=_tRawTemplate\">_tRawTemplate</a>","<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]}],"param_names_string":"template","returns":{"type_names":["Array"]},"description":"<p>Remove strings from template and assert they are empty</p>\n"},{"name":"compileAsView","is_private":false,"type":"function","params":[{"name":"raw_blocks","type_names":["<a href=\"/www/doc.html#object=Support;member=_tRawTemplate\">_tRawTemplate</a>"]}],"param_names_string":"raw_blocks","returns":{"type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]},"description":"<p>Compile template as usual and assert that it contains single view inside. Return that view</p>\n"},{"name":"compileTemplate","is_private":false,"type":"function","params":[{"name":"blocks","type_names":["<a href=\"/www/doc.html#object=Support;member=_tRawTemplate\">_tRawTemplate</a>"]},{"name":"view_config","is_optional":true,"type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]}],"param_names_string":"blocks, view_config","returns":{"type_names":["<a href=\"/www/doc.html#object=Support;member=_tTemplate\">_tTemplate</a>"]},"description":"<p>Compile raw template config</p>\n"},{"name":"createDefaultWidgetConfig","is_private":false,"type":"function","returns":{"type_names":["<a href=\"/www/doc.html#object=Support;member=_cWidget\">_cWidget</a>"]},"description":"<p>Create an empty widget config with default class and extender from schema</p>\n"},{"name":"isLiteral","is_private":false,"type":"function","params":[{"name":"string","type_names":["string"]}],"param_names_string":"string","returns":{"type_names":["boolean"]},"description":"<p>Does given string represent a JavaScript literal (&#39;true&#39;, &#39;false&#39;, &#39;null&#39;, &#39;undefined&#39;)</p>\n"},{"name":"parseResourceId","is_private":false,"type":"function","params":[{"name":"id_string","type_names":["string"]}],"param_names_string":"id_string","returns":{"type_names":["<a href=\"/www/doc.html#object=Support;member=_cResourceId\">_cResourceId</a>"]},"description":"<p>Parse value of x:resource_id attribute</p>\n"},{"name":"parseStyleAttribute","is_private":false,"type":"function","params":[{"name":"styles_string","type_names":["string"]}],"param_names_string":"styles_string","returns":{"type_names":["Object.&lt;string, string&gt;"]},"description":"<p>Parse style attribute content (plain string) into object with keys being individual style names,\nand values being actual style values</p>\n"},{"name":"parseTargets","is_private":false,"type":"function","params":[{"name":"targets_string","type_names":["string"]}],"param_names_string":"targets_string","returns":{"type_names":["Array.&lt;<a href=\"/www/doc.html#object=Support;member=_cTarget\">_cTarget</a>&gt;"]},"description":"<p>Parse a string with semicolon-delimited list of widget targets (optionally, with arguments)</p>\n"},{"name":"renderTagAttributes","is_private":false,"type":"function","params":[{"name":"attributes_object","type_names":["Object.&lt;string, string&gt;"]}],"param_names_string":"attributes_object","returns":{"type_names":["string"]},"description":"<p>Convert an object with element&#39;s attributes ([name] =&gt; &lt;value&gt; pairs) back into plain string</p>\n"},{"name":"setViewConfigId","is_private":false,"type":"function","params":[{"name":"view_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]},{"name":"id","type_names":["string"]}],"param_names_string":"view_config, id","description":"<p>Check <a href=\"/www/doc.html#object=Support;member=_cView.id\">_cView#id</a> for validity before assignment</p>\n"},{"name":"setViewConfigLabel","is_private":false,"type":"function","params":[{"name":"view_config","type_names":["<a href=\"/www/doc.html#object=Support;member=_cView\">_cView</a>"]},{"name":"label","type_names":["string"]}],"param_names_string":"view_config, label","description":"<p>Check <a href=\"/www/doc.html#object=Support;member=_cView.label\">_cView#label</a> for validity before assignment</p>\n"},{"name":"toWidget","is_private":false,"type":"function","param_names_string":"raw_tag, controller"},{"name":"unquoteString","is_private":false,"type":"function","params":[{"name":"raw_string","type_names":["string"]}],"param_names_string":"raw_string","returns":{"type_names":["string"]},"description":"<p>Turn a serialized and quoted string back into it&#39;s JavaScript representation.</p>\n<p>Assume that everything that follows a backslash is a valid escape sequence\n(all backslashes are prefixed with another backslash).</p>\n<p>Quotes inside string: lexer&#39;s regex will match all escaped quotes</p>\n"}]}]}