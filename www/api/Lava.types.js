var page_json = {"description":"<p>Primary usage of types:</p>\n<ul>\n<li>run-time checks for correctness of widget property values</li>\n<li>parse strings from templates</li>\n</ul>\n<p>Note, that these types do not correspond to JavaScript types.\nFor example: both Integer and Percent types expect numbers, but Integer type will allow only numbers without fractional part,\nwhile Percent only allows numbers between 0 and 1.</p>\n<p>All type objects have the following methods:</p>\n<table class=\"api-member-table\" cellspacing=\"0\" cellpadding=\"0\">\n    <thead>\n        <tr>\n            <td class=\"api-flag-td\"></td>\n            <td>Method name</td>\n            <td>Description</td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr data-scroll-name=\"member:_createEventWrapper\" class=\"api-member-row api-member-row-expandable\">\n            <td class=\"api-flag-td\"><img title=\"Public method\" src=\"/www/design/public-method.gif\"></td>\n            <td class=\"api-name-column\">fromString(value:string):*</td>\n            <td class=\"api-description-td\"><p>Parse string and return the value of given type. Will throw exception, if string is invalid</p></td>\n        </tr>\n        <tr data-scroll-name=\"member:_createEventWrapper\" class=\"api-member-row api-member-row-expandable\">\n            <td class=\"api-flag-td\"><img title=\"Public method\" src=\"/www/design/public-method.gif\"></td>\n            <td class=\"api-name-column\">isValidValue(value:*):boolean</td>\n            <td class=\"api-description-td\"><p>Checks if <code>value</code> belongs to type. For example: Lava.types.Boolean will accept only <span class=\"api-keyword\">true</span> and <span class=\"api-keyword\">false</span></p></td>\n        </tr>\n        <tr data-scroll-name=\"member:_createEventWrapper\" class=\"api-member-row api-member-row-expandable\">\n            <td class=\"api-flag-td\"><img title=\"Public method\" src=\"/www/design/public-method.gif\"></td>\n            <td class=\"api-name-column\">isValidString(value:string):boolean</td>\n            <td class=\"api-description-td\"><p>Check a string before parsing</p></td>\n        </tr>\n        <tr data-scroll-name=\"member:_createEventWrapper\" class=\"api-member-row api-member-row-expandable\">\n            <td class=\"api-flag-td\"><img title=\"Public method\" src=\"/www/design/public-method.gif\"></td>\n            <td class=\"api-name-column\">fromSafeString(value:string):*</td>\n            <td class=\"api-description-td\"><p>Parse type from a string, but assume that string is valid. Use after checking with isValidString()</p></td>\n        </tr>\n    </tbody>\n</table>","member_chain":[{"descriptors":[{"name":"AbstractType","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>For extension only</p>\n"},{"name":"Array","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Any array</p>\n"},{"name":"Boolean","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>A common boolean type (<span class=\"api-keyword\">true</span> or <span class=\"api-keyword\">false</span>)</p>\n"},{"name":"Date","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Any date</p>\n"},{"name":"Integer","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Numbers without fractional part</p>\n"},{"name":"Map","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>A string which is converted to any other value from a map object</p>\n"},{"name":"NonNegativeInteger","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Integers greater than zero, or zero</p>\n"},{"name":"Number","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Any decimal number</p>\n"},{"name":"Percent","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>A number between 0 and 1, inclusive</p>\n"},{"name":"PositiveInteger","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Integers strictly greater than zero</p>\n"},{"name":"Set","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>A string with an array of allowed values</p>\n"},{"name":"String","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>Any string</p>\n"},{"name":"SwitchAttribute","is_private":false,"type":"member","default_value":"<span class=\"api-highlight-gray\">{ ... }</span>","description":"<p>An HTML attribute which can take it&#39;s name as a value. Converts to <span class=\"api-keyword\">true</span></p>\n<p>Example: <br/>\nchecked=&quot;checked&quot;<br/>\nchecked=&quot;&quot;</p>\n"}]}]}