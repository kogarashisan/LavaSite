Site.pages['www/tasks'] = {
	type: "widget",
	"class": "Standard",
	extender_type: "Standard",
	container: {
		type: "Element",
		tag_name: "body"
	},
	template: [
		"\r\n\r\n<div class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\r\n\t<div class=\"container\">\r\n\t\t<div class=\"navbar-header\">\r\n\t\t\t<div class=\"navbar-brand\">LiquidLava</div>\r\n\t\t</div>\r\n\t\t<div class=\"navbar-collapse collapse\">\r\n\t\t\t<ul class=\"nav navbar-nav\">\r\n\t\t\t\t<li><!-- class=\"active\" -->\r\n\t\t\t\t\t<a href=\"/index.html\">Home</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t",
		{
			type: "widget",
			"class": "Lava.WidgetConfigExtensionGateway",
			extender_type: "Standard",
			"extends": "DropDown",
			container: {
				type: "Element",
				tag_name: "li",
				static_classes: ["dropdown"]
			},
			template: [
				"\r\n\t\t\t\t\t",
				{
					type: "view",
					"class": "View",
					container: {
						type: "Element",
						tag_name: "a",
						static_classes: ["dropdown-toggle"],
						static_properties: {href: "#"}
					},
					roles: [{
						locator_type: "Name",
						locator: "dropdown",
						name: "trigger"
					}],
					template: ["\r\n\t\t\t\t\t\tLearn <b class=\"caret\"></b>\r\n\t\t\t\t\t"]
				},
				"\r\n\t\t\t\t\t<ul class=\"dropdown-menu\">\r\n\t\t\t\t\t\t<li><a href=\"/www/doc.html#tab=tutorials\">Tutorials</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/doc.html#tab=reference\">Reference</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/doc.html#tab=api\">API</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/examples.html\">Examples</a></li>\r\n\t\t\t\t\t\t<!--li class=\"divider\"></li-->\r\n\t\t\t\t\t\t<!--li class=\"dropdown-header\">Coming soon:</li-->\r\n\t\t\t\t\t\t<!--li class=\"disabled\"><a href=\"#\">Video tutorials</a></li-->\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t"
			]
		},
		"\r\n\t\t\t\t",
		{
			type: "widget",
			"class": "Lava.WidgetConfigExtensionGateway",
			extender_type: "Standard",
			"extends": "DropDown",
			container: {
				type: "Element",
				tag_name: "li",
				static_classes: ["dropdown"]
			},
			template: [
				"\r\n\t\t\t\t\t",
				{
					type: "view",
					"class": "View",
					container: {
						type: "Element",
						tag_name: "a",
						static_classes: ["dropdown-toggle"],
						static_properties: {href: "#"}
					},
					roles: [{
						locator_type: "Name",
						locator: "dropdown",
						name: "trigger"
					}],
					template: ["\r\n\t\t\t\t\t\tDevelop <b class=\"caret\"></b>\r\n\t\t\t\t\t"]
				},
				"\r\n\t\t\t\t\t<ul class=\"dropdown-menu\">\r\n\t\t\t\t\t\t<li><a href=\"https://github.com/kogarashisan/LiquidLava/\">Core on GitHub</a></li>\r\n\t\t\t\t\t\t<li><a href=\"https://github.com/kogarashisan/LavaSite/\">Site on GitHub</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/changelog.html\">Changelog</a></li>\r\n\t\t\t\t\t\t<li><a href=\"https://github.com/kogarashisan/LiquidLava/issues?state=open\">Issues</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/roadmap.html\">Roadmap</a></li>\r\n\t\t\t\t\t\t<li><a href=\"/www/tasks.html\">Tasks</a></li>\r\n\t\t\t\t\t\t<!--li class=\"divider\"></li-->\r\n\t\t\t\t\t\t<!--li class=\"dropdown-header\">Coming soon:</li-->\r\n\t\t\t\t\t\t<li class=\"disabled\"><a href=\"#\">Code coverage</a></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t"
			]
		},
		"\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"/www/widgets.html\">Widgets</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"/www/about.html\">About</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n\r\n<div class=\"col-md-3\">\r\n\r\n</div>\r\n\r\n<div class=\"col-md-9\" role=\"main\">\r\n\r\n<h1>Development tasks</h1>\r\n\r\n<p>This is author's detailed TODO list for the framework (for general directions see the <a href=\"roadmap.html\">Roadmap</a>).\r\n\tThis page makes my work really public, but to understand something here - you need to know the source really well. Please, note:</p>\r\n<ul>\r\n\t<li>This page does not include every possible author's thought on the framework, just tasks with settled requirements.</li>\r\n\t<li>This is temporary page - in future it needs to be replaced by some task-tracking service or GitHub tracker.</li>\r\n\t<li>the tasks are listed by categories, not priority.\r\n\t\tSome of them are proposals, and either may never be implemented, or may be implemented in a very different way.</li>\r\n</ul>\r\n\r\n<p style=\"font-weight: bold;\">\r\n\tThere are many tasks here, it can make impression that framework is somehow incomplete.\r\n\tIn fact it's not true: compare this list to GitHub issues page of other frameworks, with hundreds of open tickets,\r\n\tand feel the difference!\r\n</p>\r\n<p>Most of performance-related tasks have low priority, cause framework is already fast like hell.</p>\r\n\r\n<p>Tags description:</p>\r\n<ul>\r\n\t<li><span class=\"tag-Feature\">Feature</span> - something that you would pay for, if it was a commercial product</li>\r\n\t<li><span class=\"tag-Dev\">Dev</span> - assistance in development</li>\r\n\t<li><span class=\"tag-Fix\">Fix</span> - some essential functionality which needs to be implemented</li>\r\n\t<li><span class=\"tag-Q\">Q</span> - questionable proposal, something that may be discarded</li>\r\n\tSelf-explanatory:\r\n\t<li><span class=\"tag-Bug\">Bug</span></li>\r\n\t<li><span class=\"tag-Performance\">Performance</span></li>\r\n\t<li><span class=\"tag-Refactoring\">Refactoring</span></li>\r\n\t<li><span class=\"tag-Test\">Test</span></li>\r\n</ul>\r\n\r\n\r\n<h2>The src/ directory</h2>\n<h3>System-wide or uncategorized</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> isLiteral - move to one place</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> \"use strict\"</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> new selector for event and role targets: NameAndLabel<span class=\"task-comment\">affects ExpressionParser, view.Abstract, ViewManager</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> New selector for event and role targets: \"Instance\" - for adding targets at run time<span class=\"task-comment\">also use it in DropDown</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> hard_refresh event for views hierarchy<span class=\"task-comment\">to force refresh of views, which are bound to plain JS objects (like Angular refresh cycle)</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Q\">Q</span> new kind of template includes - inlineInclude. Will be replaced in config, once and forever.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Q\">Q</span> Widget and Refresher* must not access Firestorm.Element</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> CONTROL_ATTRIBUTE_PREFIX and some other constants must be moved into Lava or schema</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> remove \"active modifiers\" (see parsers, Argument and support)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> CSS compression, including class names</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Resource names compression</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> search the framework code and find possibilities to rewrite for usage of:<br/>Firestorm.Array.exclude and Firestorm.Object.copy<span class=\"task-comment\">Firestorm.Object.copy may be used in ClassManager in place of extend()</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> config extenders should be converted into normal class, and created in Lava.init()</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span> new kind of argument - StaticArgument for one-time calculations. Use it in static_eval<span class=\"task-comment\">must not attach listeners</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Q\">Q</span> Possible optimization: if Argument is equal to scope binding, than do not create an argument, get the binding.<span class=\"task-comment\">search every place where Argument is used</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span> Segment option to evaluate it's property name only once and do not create listeners<span class=\"task-comment\">requires new kind of syntax, like: row[{column.name}]</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Refactoring\">Refactoring</span> Move some exception texts into Lava.known_exceptions (like 'abstract function call')</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> add possibility to have several Lava versions on one page</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Refactoring\">Refactoring</span> one DEBUG switch should be split into several.<span class=\"task-comment\">like:<br/> DEBUG_SCOPES - the scope processiong cycle,<br/>\n DEBUG_FATAL - useful explanations before something will fail anyway (may be safely turned off in release),<br/>\n DEBUG_DEV - wrong configuration by the programmer. <br/>\n DEBUG_PARSERS - wrong templates <br/>\n DEBUG_LISTENERS - listeners on destroyed objects</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> some DEBUG checks should become permanent (remove \"DEBUG\" condition)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> _cRawBlock.class_locator.name - rename to locator and change type to _cViewLocator.<br/>Same for _cWidgetConfig.class_locator.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> ScopeManager::scheduleScopeRefresh: do not return an object, use property of the Refreshable.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Dev\">Dev</span> recursive x:binding and x:assign protection.<span class=\"task-comment\">Currently, you can create an assign of any property to itself</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> remove the 'extender: \"Standard\"' from widget configs. Currently, it's the only available extender<span class=\"task-comment\">if config does not have an \"extender\" specified, than it should default to \"Standard\". Affects: Lava.js and config generation.</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> each destroy() must call parent's destroy() in the end (not earlier)</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Performance\">Performance</span> Optimize config extension: widget configs without parent must be created with `is_extended = true`<span class=\"task-comment\">1) widgets with static class name must have full class name in the \"class\" attribute.<br/> 2) with dynamic class name - must have locator gateway in 'class'.</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> FocusManager: specification recommends to use focus() instead of blur()<span class=\"task-comment\">https://html.spec.whatwg.org/#focus-management-apis</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> one-time expression evaluations, like x:static_eval or one-time assign,<br/>must be evaluated without creating bindings, using evalPathConfig()</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> labels for inputs (with \"for\" attribute) need to be rendered as text<span class=\"task-comment\">Now they must to be views, otherwise \"for\" attribute can not be set. If there is no other functionality<br/> except \"for\" attribute, then label should be rendered as static text.</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Refactoring\">Refactoring</span> Rewrite TemplateWalker without \"throw\"</li>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Refactoring\">Refactoring</span> rename certain UPPER_CASE properties in Firestorm and schemas.<br/>Refactor Firestorm.Environment - store test results in an array (indices will be stored as separate {NAME => index} object)<span class=\"task-comment\">if property value is determined at run time (not on server) - it must be lower case</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Feature\">Feature</span> Create \"View/Cacher\" classes, that will allow to reuse templates inside If and Foreach views<span class=\"task-comment\">Template may contain dynamic includes - such templates require custom caching algorithms.<br/> Also need a way to cache all templates by item GUID for static trees.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Feature\">Feature</span> Scopes must destroy themselves when they have no dependencies<span class=\"task-comment\">when the last \"changed\" listener is removed. Destroyed scopes must become unusable.</span></li>\n</ul>\n<h3>Lava.js</h3>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> simplify getWidgetSugarInstance(), get rid of _widget_title_to_sugar_instance</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> bootstrap() process produces an empty `class` attribute on &lt;body&gt; element.<br/>Fix that, if possible.</li>\n</ul>\n<h3>Animation/</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> pulsating and cyclic animations<span class=\"task-comment\">most likely, there will be another independent class - AnimationSequence</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> animations should switch to transitions, if browser supports them<span class=\"task-comment\">there must be a separate setting in the shema, USE_TRANSITIONS</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> native Scroll animation, which adjusts it's duration in dependency to acroll distance<span class=\"task-comment\">Dependency should be logarithmic. Use it in documentation page, instead of Fx.Scroll</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> add reverse_direction option to config (when animation is created - it's already reversed)</li>\n</ul>\n<h3>Animation/BootstrapCollapse.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> check for transitions support. If browser does not support transitions - apply end state immediately, without waiting.</li>\n</ul>\n<h3>Animation/Toggle.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> must inherit from Emulated, + missing some important code</li>\n</ul>\n<h3>Animation/Emulated.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Fix\">Fix</span> does not refresh it's started_time and some other variables<span class=\"task-comment\">they are not used by the class, but may be needed for synchronization</span></li>\n</ul>\n<h3>Data/</h3>\n<ul>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> Allow to name 'id' column differently</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> Allow string IDs (currently, only numbers are supported)</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> schema switch to turn off validation</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> an ability to unload records from modules to free memory.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> DateTime field. Will be serialized to integer, but internal value will be a Date object.</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> Record and Collection fields should be exportable</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> fields with calculated value and dependencies.<span class=\"task-comment\">Something like this:<br/> <pre>title: {\n\t\tget: function() { return this.get('first_name') + ' ' + ...}\n\t\tdepends:['first_name', 'last_name']\n\t}</pre></span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> MetaStorage: allow Collection and Record fields inside it</li>\n</ul>\n<h3>Data/Field/</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Q\">Q</span> Integer and Id fields: invent some better check than regex<span class=\"task-comment\">this._shared.valid_value_regex.test(value)</span></li>\n</ul>\n<h3>Data/ModuleAbstract.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> destroy: should the records be destroyed, and how? See comment inside destroy()</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Refactoring\">Refactoring</span> record storage should be created from a function (now it's an object)</li>\n</ul>\n<h3>Data/Module.class.js</h3>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> Move _records_by_id functionality to the ID field</li>\n</ul>\n<h3>Firestorm/</h3>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Performance\">Performance</span> DOM#_setInnerHTML - split into two versions, depending on bug presence</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Element.fromHTML(html)<span class=\"task-comment\">turn html into nodes, assert there is only one and return it</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> use insertAdjacentHTML where possible (*)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> implement fast offset calculation algorithm (*)</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Performance\">Performance</span> use native element's classList property in addClass(es), removeClass(es), hasClass</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> hashchange event emulation for old/mobile browsers (not supported in Opera mini)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> native setters like setClass and setHTML</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Array.select(), selectFirst() - like filter, but returns another array</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Q\">Q</span> Firestorm.Environment - rename to Browser</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> finish Firestorm</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> When getting rid of MooTools: provide a file with shims for methods that do not exist in older<br/>JavaScript environments. For example: Array.forEach (the to_do_app depends on it) or Object.keys</li>\n</ul>\n<h3>Parsers/</h3>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Dev\">Dev</span> make the text for exception \"Text is not allowed in this context\" inside asBlocks() more meaningful<span class=\"task-comment\">text should depend on context</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> x:controller control attribute - similar to x:widget<span class=\"task-comment\">create an inline widget from element, with specified controller class. Also should work on sugar.</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> static_value directive should treat it's content as default value.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> use _include_locator_regex instead of _locator_regex, and check in code for disallowed symbols. Same for _identifier_regex.<span class=\"task-comment\">_include_locator_regex includes \"$\", which should not be in _locator_regex.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Dev\">Dev</span> When creating x:type=\"view\" and other views from HTML tags - check that there is no properties and styles,<br/>which are bound and have a static value at the same time<span class=\"task-comment\">See x:type-\"container\": if (('static_styles' in container_config) && ('style_bindings' in container_config)) ...</span></li>\n</ul>\n<h3>Parsers/Directives.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> x:class_binding directive - alternative form for x:class attribute</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Dev\">Dev</span><span class=\"tag-Q\">Q</span> resources: need &lt;component path=\"...\"&gt; tag inside &lt;resources&gt; to shorten paths</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Dev\">Dev</span> set_config_options template editing task:<br/>1) allow to set several options at once (via &lt;assigns&gt; collection) <br/>\n2) allow to use user-defined function as filter condition <br/>\n3) allow to select several items at once</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> known tasks for edit_template: move into separate object. Rename 'known' -> 'predefined'</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Refactoring of &lt;x:refresher&gt; directive<span class=\"task-comment\">1) Allow attributes like 'class'.<br/> 2) Allow packages for view refreshers (&lt;x:refresher type=\"$classname/RefresherName\"&gt;)</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Fix\">Fix</span> x:attach_directives creates empty content template on wrapped tag. Must not create a template.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> Lots of checks of data validity inside directives should be moved to processDirective().<br/>Get rid of is_top_directive switch (it equals to view_config_presence switch).<span class=\"task-comment\">Also, try to gather data validity checks for resources in the resource tag handler</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Fix\">Fix</span><span class=\"tag-Q\">Q</span> Empty space between top directives should be removed<span class=\"task-comment\">currently compile process does not remove it. See parse result on the reference page for x:option directive</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Dev\">Dev</span> For plural string definitions in resources: add check that number of strings matches number of plural forms in the locale</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Q\">Q</span> allow \"roles\" attribute on widget definition directive (x:widget) - can be used instead of &lt;roles&gt; tag</li>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Refactoring\">Refactoring</span> universal x:config directive and &lt;config&gt; tag in widget definition,<br/>which integrates functionality of other directives</li>\n</ul>\n<h3>Parsers/ObjectParser.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> allow Date and RegExp type in objects. Date will be created with \"new\" operator.</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> allow JavaScript comments</li>\n</ul>\n<h3>Parsers/TemplateParser.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> allow to set class for widget extenders</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> implement removal of empty space from templates</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> remove unused lexer switches: preserve_whitespace (\"pre:\") and pure_blocks</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Fix\">Fix</span><span class=\"tag-Dev\">Dev</span> _parseStyleAttribute: currently will not parse style strings which contain strings with semicolon inside them as style value<span class=\"task-comment\">do not use such styles, use classes!</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Fix\">Fix</span> sequential strings are not always united into one</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Fix\">Fix</span> script[type=\"lava/fragment\"] should work as s lexer switch - to allow it to break block boundaries<span class=\"task-comment\">&lt;script type=\"lava/fragment\"&gt;{#view()}&lt;/script&gt;{/view}.<br/> Also correct the doc.html</span></li>\n</ul>\n<h3>Parsers/ExpressionParser.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> macros to shorten the ternary operator, for example: \"{is_active -&gt; 'active'}\"</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span> currently, each time any variable is referenced in argument's source code - it creates a new binding config.<br/>Parser must unite bindings to the same variable referenced multiple times.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> static arguments must have their value in configs</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> remove the dn() operator. It's existence is not possible with current architecture.<br/>Finish the up() operator, or remove it also.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> remove the `//depends:{}` operator (deprecated)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> flags in result are rarely used, they should not be present by default (they take space in serialized templates).<br/>Either make separate method parseWithFlags() or make another parameter to existing method parse_with_flags.</li>\n</ul>\n<h3>System/App.class.js</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> app.createModule(config) - create a module with given schema</li>\n</ul>\n<h3>System/Enumerable.class.js</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> methods moveIndex(old_index, new_index) and moveValue(value, new_index)<span class=\"task-comment\">is equivalent of removeAt, then insertAt for given value. Preserves UID.</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Performance\">Performance</span> Enumerable is inherited from Properties, but does not use _properties and _property_listeners.<br/>They should not take space in constructed objects.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> - select(), selectFirst() - like filter, but returns array, instead of modifying the instance<span class=\"task-comment\">also, refactor the site:build/src/ContentLoader class for usage of new methods</span></li>\n</ul>\n<h3>System/PopoverManager.class.js</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Fix\">Fix</span> Tooltip blinks when moving cursor towards the tooltip</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> add an option to show empty tooltips</li>\n</ul>\n<h3>System/Sugar.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Dev\">Dev</span> always check that there are no redundant attributes on sugar tags<span class=\"task-comment\">it's checked on root tag, but not on objects</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> allow to set the default widget config in sugar. It will allow to create a sugar with default options.<span class=\"task-comment\">Reason: sometimes you will want to add options and other settings to sugar.<br/> Such config must be merged properly.</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Q\">Q</span> control attributes of sugar should be handled in Sugar class</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> when parsing sugar inside x:define and x:widget: sugar config must be merged with parent,<br/>and class name of sugar must be taken from config.</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> Allow to create \"alias\" properties in storage objects. Reason: this will allow to create better-looking attribute names for sugar.<br/>For example: main attribute is called \"is_active\" (Boolean), alias will be called \"active\" (switch).<span class=\"task-comment\">solution: descriptor for alias property has flag \"isAlias\", for example: {active: {type: \"Switch\", isAlias: true}, ...}.<br/> Before &lt;storage&gt; tag and sugar parses the raw AST - they first collect a list of attributes,\n which have an alias, to restrict them. When TemplateWalker walks a template - it ignores properties with isAlias flag.</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> sugar: allow content type that can map certain tags to items in storage collections.<br/>Aim: you will not need to write &lt;panels&gt; in &lt;accordion&gt;, just &lt;panel&gt;</li>\n</ul>\n<h3>System/Template.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Q\">Q</span> render() function compilation.<span class=\"task-comment\">Take into account that code may be compressed</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> static IF/ELSEIF/ELSE construct.<span class=\"task-comment\">will include parts of template by evaluating it's conditions once.<br/> Faster than regular IF view, but does not react to changes.</span></li>\n</ul>\n<h3>System/ViewManager.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span><span class=\"tag-Q\">Q</span> speed up event dispatching and argument evaluation. Cache target and scope.<br/>+ Late evaluation for event arguments, as event does not always has valid targets.</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> leftclick and rightclick events.<span class=\"task-comment\">algorithm: separate method for handling the click event, which checks \"leftclick\" and \"rightclick\" attributes,<br/> and presence of right mouse button. Apply leftclick event on the doc.html page (for click to show method's extended description).</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> give it ability to cancel event bubbling by elements<span class=\"task-comment\">now only bubbling by widget hierarchy can be cancelled, not by elements</span></li>\n</ul>\n<h3>View/</h3>\n<ul>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Feature\">Feature</span> View/Include.class.js - view, which takes it's template config from a variable (dynamic include)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span> View/Switch.class.js - analog of the IF view, but with one argument.<span class=\"task-comment\">will also affect TemplateParser and configs</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span><span class=\"tag-Q\">Q</span> replace tagName in container.Morph with nodeName<span class=\"task-comment\">must do it with tests, otherwise too dangerous</span></li>\n</ul>\n<h3>View/Foreach.class.js</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Dev\">Dev</span> \"count\" property must be read-only</li>\n</ul>\n<h3>View/Container/Element.class.js</h3>\n<ul>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Fix\">Fix</span><span class=\"tag-Dev\">Dev</span> if you render it's content and change any attribute before it's in DOM,<br/>then you will get wrong content in DOM. Make protection from such lifecycle.<span class=\"task-comment\">make \"is_rendered\"/\"waits_insertion\" switch and throw an error, if setting a property while it's on</span></li>\n</ul>\n<h3>Widget/Standard.class.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> \"cancel_bubble\" event and role handler to allow declaratively cancel bubbling of roles and events from templates<span class=\"task-comment\">three lines of code, but is it really needed?</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> move translateBoolean modifier from global space to widget instance method<span class=\"task-comment\">widgets can be extended to allow dynamic locale switching. Booleans should be translatable with widget locale.</span></li>\n</ul>\n<h3>ClassManager.class.js</h3>\n<ul>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Feature\">Feature</span> Add ability to store arrays in Shared (it may be named differently, like \"Prototype\")<br/>Move default input roles from InputAbstract to prototype</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> Static members. Like Shared, but copied to prototype as-is. It's impossible to overwrite a Static member in inherited class.</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> Function inheritance: check if function calls it's parent. If not - do not create a parent in the prototype.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> mode, when classes are not exported. All classes exist only inside ClassManager, you can use .getConstructor() and .define()</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> conditional members. Member will be in class when condition is true.<span class=\"task-comment\">sometimes you want to create a build with different features included. Also some classes have debug members.</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> overrides: functions which does not need a parent</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> \"final\" functions and members - must not be overridden. Example: HierarchyMember._onRefreshed</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> abstract classes - classes with no constructor (instead there will be a function which throws an exception)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> abstract functions - must be overridden in inherited classes.<span class=\"task-comment\">Class with an abstract function which is not overridden - is also abstract.<br/> When overriding happens - the parent function is not created</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> empty class functions should not be in r[], they should be a reference somewhere to Lava.empty()/noop()</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> all parent function names should be resolved automatically.<span class=\"task-comment\">It will allow to insert a class in middle of the hierarchy.<br/> Also assert there are no limitations for compression. <br/>\n also rename &lt;%fname%&gt; macros in strings inside the function to current function's name (needed in exceptions).</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Dev\">Dev</span> wrapper for ClassManager to be used separately from the framework</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Performance\">Performance</span> Should it reserve nulls in object prototypes for those members, which are created in constructor?<span class=\"task-comment\">Does it affect performance? Needs a test.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Static constructors. Move patches from container.Element and text inputs into static constructors</li>\n</ul>\n<h3>Serializer.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> currently, serializing a string preserves the \"\\r\\n\" sequence.<br/>Convert it to \"\\n\" by default and make a schema switch to return the old behaviour.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Add options<span class=\"task-comment\">1) Add an option to serialize into valid JSON format (with quoted attributes)<br/> 2) Way to remove padding and spaces</span></li>\n</ul>\n<h3>transitions.js</h3>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Fix\">Fix</span> more transitions (*)</li>\n</ul>\n<h3>Lava.js</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> namespaces reservation: move to a separate file (this will allow to generate it in user projects)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> create a script, which generates the file with namespaces in Lava.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Lava.addType() - add a new type to Lava.types</li>\n</ul>\n<h3>Algorithms/Sorting/</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Performance\">Performance</span> Need fast unstable sort algorithm (*)</li>\n</ul>\n<h2>Existing widgets</h2>\n<h3>Accordion</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> collapseAll()</li>\n</ul>\n<h3>Select</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> there must be a sugar which parses it's content (optgroup and option tags)<span class=\"task-comment\">it will be custom function, which is independent from Sugar class.<br/> Schema will define where to put the result. <br/>\n Requires Sugar modification.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> browser fixes and code that accesses elements should be in Firestorm</li>\n</ul>\n<h3>DropDown</h3>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> does not support the \"disabled\" class (is it needed?); \"open\" class should be assignable via option.</li>\n</ul>\n<h3>Calendar</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> should be constant size, support range selection and support full localization for \"now\" and month name<span class=\"task-comment\">in some languages month and year numbers are not arabic</span></li>\n</ul>\n<h3>Inputs</h3>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> working form_id attribute</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> validation for email input.<span class=\"task-comment\">most likely, there will be separate class input.Email: it will have internal value and update it's is_valid property<br/> just like input.Number. Text input with type=\"email\" will not have validation (it's still a text input).</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> input watermarks<span class=\"task-comment\">in Lava they will be elements before the input, with negative margin. It's the most reliable way.</span></li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> input labels should be configured as attributes + standalone widget</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> moveCursorToStart(), moveCursorToEnd(), isCursorAtStart(), isCursorAtEnd() API for text inputs</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> option to focus input field when widget is inserted into DOM<span class=\"task-comment\">enable it in examples with input field, remove custom input widget from To Do app example</span></li>\n</ul>\n<h2>Create widgets</h2>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> reorderable list (with mouse support)</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> list with selectable items (multiple selection, adding/removing items with Ctrl)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> TimePicker</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Slider<span class=\"task-comment\">with hidden input field, left and right slider</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Menu<span class=\"task-comment\">with keyboard navigation</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Validator - a separate widget with visitor pattern for validation rules<span class=\"task-comment\">wraps the input</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> ProgressBar</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Dialog</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Pagination</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> ColorPicker</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Rating</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Alert widget (floating messages with color background and dismiss button)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Carousel</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> DataView</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Affix/Scrollspy</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Lightbox</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Autocomplete (suggest) input</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Calendar with event scheduler</li>\n</ul>\n<h2>New functionality</h2>\n<ul>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> finish FocusManager - a class which routes keyboard input to it's current \"focused\" target<br/>(target is a widget, which supports the 'focusable' interface)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Lava.system.CollectionListener - batch add listeners to items in Enumerable collections</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Unit tests for all classes</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Advanced code compression</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Drag-and-Drop functionality</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> UI layer (desktop-like widgets)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Delay loading of images and objects</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> ARIA compatibility for widgets</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Server-side communication for Data layer</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> create a router<span class=\"task-comment\">also use it in todo_app and documentation page</span></li>\n</ul>\n<h2>Build</h2>\n<ul>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> a better build script</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> build script should remove unnecessary members that depend on switches<span class=\"task-comment\">Example: Lava.exportTranslatableString should be removed, when Lava.schema.parsers.EXPORT_STRINGS is off</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> the Lava Node module must not be exported to global</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> build script should write version and commit hash to the result files</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Some classes include static parse results. For example: Tree class uses ExpressionParser.parseScopeEval() in class body.<br/>Such expressions should be evaluated on server.</li>\n</ul>\n<h2>Site</h2>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> this list should be turned into something more usable.<span class=\"task-comment\">People should be able to leave comments, vote for features they need, and gather requirements.<br/> This may be done in external service.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Widgets page must display source code of widget usage + it must be assembled like Examples</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Refactoring\">Refactoring</span> there must be no calls to TemplateParser (via Lava.bootstrap) in the www directory.<br/>Everything must be assembled on server.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Widgets page: each widget must have a detailed description with usage, events, roles, properties and options</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Widgets page: add Tree widget</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> a demo of a native widget wrapper (for example, CodeMirror, color pickers or Select2)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> there must be an ability to launch unit tests right on the framework site</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> code coverage for unit tests, that can be viewed online</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Replace images in the tree, gif -&gt; png<span class=\"task-comment\">other images should also be png</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Create favicon</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Better design than plain Bootstrap theme</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> create an example \"Miner\" game (in the Examples page)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> when framework version reaches 1.0 - create \"lava-1.0.js\" in site `lib/` directory and replace<br/>the reference to the library in all JSFiddle examples. Documentation should also be versioned at this point.</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Filtered tree example must automatically expand and collapse certain nodes when filter changes</li>\n</ul>\n<h2>Documentation</h2>\n<ul>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> Display @throws for methods</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span> Box with source code should have language indication (js, xml, ...)</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Document global events (those, fired from App)<span class=\"task-comment\">events may be marked with \"@lava-global-event\" tag</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Fix\">Fix</span> Collapsible widget: unable to describe it's option, as it does not have a constructor.</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> Paragraphs in Reference must also have links, which can be referenced by @link tag</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> Refactor DocPage.class.js, move operations with hash into ContentLoader.class.js</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Refactoring\">Refactoring</span> Refactor buildDoc.js task. Now it's too complex.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Display values for most class properties either in their \"value\" column, or in their extended description.<span class=\"task-comment\">Regular expressions, short arrays, callback maps. Example: Lava.ObjectParser.yy.allowed_globals.<br/> This means that some properties will have extended description, like methods.</span></li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> On Widgets page: show widget sources in collapsible panels</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Check: if function returns a value - than it must be described in @returns JSDoc comment<span class=\"task-comment\">this can be done with Esprima</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> If parent method has @returns and inherited has JSDoc block - than JSDoc block of inherited method<br/>must also contain @returns</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Show source code for classes and make ability to reference lines of code.<br/>Link all members to their source.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Ability to filter class trees. Take functionality from FilteredTree example.<span class=\"task-comment\">Should display \"nothing found\" when there are no records.<br/> Should automatically expand folders with only one item inside them.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Ability to filter class members</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Ability to create links to class members from user interface<span class=\"task-comment\">hovering a member must show a link to it</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Versioning of the documentation</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Display \"defined\" and \"overridden\" fields for each member.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Feature\">Feature</span> Tables with members must be collapsible. Tables with mixins must be collapsed by default.</li>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Feature\">Feature</span> Links to members must have \"short\" \"middle\" and \"long\" titles. Versions can be chosen by @sl (short link) and @fl (full link) tags.<span class=\"task-comment\">Example: \"Lava.mixin.Properties#on\" - long, \"Properties#on\" - middle, \"on\" - short.<br/> Also correct all links which already have a custom title.</span></li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Refactoring\">Refactoring</span> Rewrite doc.html - must use IF view instead of manual widget insertion (depends on \"Include\" view).</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> make it look better with \"warning\" and \"info\" boxes, and other formatting tools</li>\n<li><span class=\"tag-P3\">P3</span><span class=\"tag-Feature\">Feature</span> register links to examples in /www/examples.html so they could be referenced in documentation</li>\n<li><span class=\"tag-P4\">P4</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> make an instruction to automatically embed pieces of serialized code from the framework (methods, variables, etc).<span class=\"task-comment\">Example: embed source of Lava.parseOptions in api_docs/ObjectParser</span></li>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Fix\">Fix</span> does not recognize @define tag (for example, on Lava.schema.DEBUG)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span><span class=\"tag-Q\">Q</span> write extended description for class methods and properties</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Describe the `count` property in Enumerable</li>\n</ul>\n<h2>Maintenance</h2>\n<ul>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Feature\">Feature</span> Automatic on-commit codestyle validation<span class=\"task-comment\">one \"var\" per function, no camelCase, etc...</span></li>\n</ul>\n<h2>Testing</h2>\n<ul>\n<li><span class=\"tag-P1\">P1</span><span class=\"tag-Test\">Test</span> Check how framework handles focus management on Safari IOS (it does not support focus on links)</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Test\">Test</span> Check if \"click\" events are delegated on IOS</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Test\">Test</span> (old IE) IE8: check if get/set value on &lt;select&gt; elements works as expected. Write tests.<span class=\"task-comment\">see<br/> https://mootools.lighthouseapp.com/projects/2706/tickets/1116 <br/>\n https://github.com/mootools/mootools-core/issues/2041 <br/>\n and Source\\Element\\Element.js in MooTools</span></li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Test\">Test</span> fixes for old IE: check if event delegation for \"change\" event and others works in IE 8 and less.</li>\n<li><span class=\"tag-P2\">P2</span><span class=\"tag-Test\">Test</span> does textarea work correctly in IE8-9 (does it send \"changed\" on backspace, delete and cursor operations)?</li>\n<li><span class=\"tag-P5\">P5</span><span class=\"tag-Test\">Test</span> (old IE) seems, like in IE8 keyup/down/press events should be hanged on document instead of window?<span class=\"task-comment\">http://www.quirksmode.org/dom/events/keys.html</span></li>\n</ul>\n\r\n\r\n\r\n</div>\r\n\r\n</div>\r\n</div>\r\n\r\n<footer>\r\n\t<div class=\"container\">\r\n\t\t<div class=\"footer-inner\">Copyright (c) 2014 Alex Galashov. MIT Licence.</div>\r\n\t</div>\r\n</footer>\r\n\r\n"
	],
	is_extended: true
}