#The src/ directory
System-wide or uncategorized
	- [P5,Refactoring] isLiteral - move to one place
	- [P5,Refactoring] "use strict"
	- [P3,Feature] new selector for event and role targets: NameAndLabel
		// affects ExpressionParser, view.Abstract, ViewManager
	- [P3,Refactoring, Performance] inside sleep() of the views it's not needed to turn off the argument listeners, only arguments themselves.
	- [P5,Performance,Q] turn off view bindings in sleep() (*)
	- [P5,Feature,Q] hard_refresh event for views hierarchy
		// to force refresh of views, which are bound to plain JS objects (like Angular refresh cycle)
	- [P5,Feature,Performance,Q] new kind of template includes - inlineInclude. Will be replaced in config, once and forever.
	- [P2,Refactoring] Widget and Refresher* must not access Firestorm.Element
	- [P3,Refactoring] CONTROL_ATTRIBUTE_PREFIX and some other constants must be moved into Lava or schema
	- [P5,Refactoring] remove "active modifiers" (see parsers, Argument and support)
	- [P3,Feature] CSS compression, including class names
	- [P3,Feature] Resource names compression
	- [P5,Refactoring] search the framework code and find possibilities to rewrite for usage of:
		Firestorm.Array.exclude and Firestorm.Object.copy
		// Firestorm.Object.copy may be used in ClassManager in place of extend()
	- [P3,Feature] config extenders should be turned into normal class, and created in Lava.init()
	- [P3,Feature,Performance] new kind of argument - StaticArgument for one-time calculations. Use it in static_eval
		// must not attach listeners
	- [P3,Refactoring,Performance] Possible optimization: if Argument is equal to scope binding, than do not create an argument, get the binding.
		// search every place where Argument is used
	- [P3,Feature,Performance] Segment option to evaluate it's property name only once and do not create listeners
		// in expression parser it will be curly braces instead of square: row{column.name}
	- [P4,Refactoring] Move some exception texts into Lava.known_exceptions (like 'abstract function call')
	- [P5,Feature,Q] add possibility to have several Lava versions on one page
	- [P4,Refactoring] one DEBUG switch should be split into several.
		// like:
		// DEBUG_SCOPES - the scope processiong cycle,<br/>
		// DEBUG_FATAL - useful explanations before something will fail anyway (may be safely turned off in release),<br/>
		// DEBUG_DEV - wrong configuration by the programmer. <br/>
		// DEBUG_PARSERS - wrong templates <br/>
		// DEBUG_LISTENERS - listeners on destroyed objects
	- [P5,Refactoring] some DEBUG checks should become permanent (remove "DEBUG" condition)
	- [P3,Refactoring] _cRawBlock.class_locator.name - rename to locator and change type to _cViewLocator.
		Same for _cWidgetConfig.class_locator.
	- [P3,Refactoring] ScopeManager::scheduleScopeRefresh: do not return an object, use property of the Refreshable.
	- [P2,Dev] recursive x:binding and x:assign protection.
		// Currently, you can create an assign of any property to itself
	- [P3,Fix] fixes for old IE: check if get/set value on &lt;select&gt; elements works as expected. Write tests.
		// see
		// https://mootools.lighthouseapp.com/projects/2706/tickets/1116 <br/>
		// https://github.com/mootools/mootools-core/issues/2041 <br/>
		// and Source\Element\Element.js in MooTools
	- [P3,Fix] fixes for old IE: check if event delegation for "change" event and others works in IE 8 and less.
	- [P2,Refactoring] remove the 'extender: "Standard"' from widget configs. Currently, it's the only available extender
		// if config does not have an "extender" specified, than it should default to "Standard". Affects: Lava.js and config generation.
	- [P5,Refactoring] each destroy() must call parent's destroy() in the end (not earlier)
	- [P5,Feature] (experimental) create a lighter fork of the framework: without Refreshable mixin.
	- [P2,Performance] Optimize config extension: widgets configs without parent must be created with `is_extended = true`
		// 1) widgets with static class name must have full class name in the "class" attribute.<br/>
		// 2) with dynamic class name - must have locator gateway in 'class'.

Lava.js
	- [P2,Refactoring] simplify getWidgetSugarInstance(), get rid of _widget_title_to_sugar_instance
Animation/
	- [P5,Feature] pulsating and cyclic animations
		// most likely, there will be another independent class - AnimationSequence
	- [P5,Feature,Q] animations should switch to transitions, if browser supports them
		// there must be a separate setting in the shema, USE_TRANSITIONS
	- [P5,Feature] native Scroll animation, which adjusts it's duration in dependency to acroll distance
		// Dependency should be logarithmic. Use it in documentation page, instead of Fx.Scroll
	- [P3,Feature] add reverse_direction option to config (when animation is created - it's already reversed)
Animation/BootstrapCollapse.class.js
	- [P5,Feature] check for transitions support. If browser does not support transitions - apply end state immediately, without waiting.
Animation/Toggle.class.js
	- [P5,Refactoring] must inherit from Emulated, + missing some important code
Animation/Emulated.class.js
	- [P5,Fix] does not refresh it's started_time and some other variables
		// they are not used by the class, but may be needed for synchronization
Data/
	- [P4,Feature] Allow to name 'id' column differently
	- [P4,Feature] Allow string IDs (currently, only numbers are supported)
	- [P2,Feature] schema switch to turn off validation
	- [P2,Feature] an ability to unload records from modules to free memory.
	- [P3,Feature] DateTime field. Will be serialized to integer, but internal value will be a Date object.
	- [P4,Feature] Record and Collection fields should be exportable
	- [P5,Feature] fields with calculated value and dependencies.
		// Something like this:
		// <pre>title: {
		//		get: function() { return this.get('first_name') + ' ' + ...}
		//		depends:['first_name', 'last_name']
		//	}</pre>
	- [P5,Feature] MetaStorage: allow Collection and Record fields inside it
Data/Field/
	- [P5,Performance] Integer and Id fields: invent some better check than regex
		// this._shared.valid_value_regex.test(value)
Data/ModuleAbstract.class.js
	- [P5,Refactoring] destroy: Should the records be destroyed, and how? See comment inside destroy()
	- [P3,Performance, Refactoring] record storage should be created from a function (now it's an object)
Data/Module.class.js
	- [P2,Refactoring] Move _records_by_id functionality to the ID field
Firestorm/
	- [P5,Feature] Element.fromHTML(html)
		// turn html into nodes, assert there is only one and return it
	- [P5,Performance] use insertAdjacentHTML where possible (*)
	- [P5,Performance] implement fast offset calculation algorithm (*)
	- [P4,Performance] use native element's classList property in addClass(es), removeClass(es), hasClass
	- [P5,Feature] hashchange event emulation for old/mobile browsers (not supported in Opera mini)
	- [P3,Feature] native setters like setClass and setHTML
	- [P2,Feature] Array.select(), selectFirst() - like filter, but returns another array
	- [P2,Refactoring,Q] Firestorm.Environment - rename to Browser
	- [P5,Feature] finish Firestorm
Parsers/
	- [P2,Dev] make the text for exception "Text is not allowed in this context" inside asBlocks() more meaningful
		// text should depend on context
	- [P1,Dev] asBlocks should filter out HTML comments (to allow comments inside widget definitions)
	- [P3,Feature] x:controller control attribute - similar to x:widget
		// create an inline widget from element, with specified controller class. Also should work on sugar.
	- [P5,Feature,Q] static_value directive should treat it's content as default value.
	- [P3,Refactoring] use _include_locator_regex instead of _locator_regex, and check in code for disallowed symbols. Same for _identifier_regex.
		// _include_locator_regex includes "$", which should not be in _locator_regex.
	- [P2,Dev] When creating x:type="view" and other views from HTML tags - check that there is no properties and styles,
		which are bound and have a static value at the same time
		// See x:type-"container": if (('static_styles' in container_config) && ('style_bindings' in container_config)) ...
Parsers/Directives.js
	- [P5,Feature] x:classBinding directive - alternative form for x:class attribute
	- [P5,Dev,Q] resources: need &lt;component path="..."&gt; tag inside &lt;resources&gt; to shorten paths
	- [P4,Dev] set_config_options template editing task:
		1) allow to set several options at once (via &lt;assigns&gt; collection) <br/>
		2) allow to use user-defined function as filter condition <br/>
		3) allow to select several items at once
	- [P3,Refactoring] known tasks for edit_template: move into separate object. Rename 'known' -> 'predefined'
	- [P2,Feature] Refactoring of &lt;x:refresher&gt; directive
		// 1) Allow attributes like 'class'.
		// 2) Allow packages for view refreshers (&lt;x:refresher type="$classname/RefresherName"&gt;)
	- [P3,Fix] x:attach_directives creates empty content template on wrapped tag. Must not create a template.
	- [P2,Refactoring] Lots of checks of data validity inside directives should be moved to processDirective().
		Get rid of is_top_directive switch (it equals to view_config_presence switch).
		// Also, try to gather data validity checks for resources in the resource tag handler
	- [P3,Fix,Q] Empty space between top directives should be removed
		// currently compile process does not remove it. See parse result on the reference page for x:option directive
	- [P4,Dev] For plural string definitions in resources: add check that number of strings matches number of plural forms in the locale
Parsers/ObjectParser.js
	- [P5,Feature,Q] allow Date and RegExp type in objects. Date will be created with "new" operator.
	- [P5,Feature] allow JavaScript comments
Parsers/TemplateParser.js
	- [P5,Feature,Q] allow to set class for widget extenders
	- [P4,Feature] implement removal of empty space from templates
	- [P5,Feature,Q] &lt;x:region&gt; directive for includes: it will allow to cut off pieces of template depending on options
	- [P5,Refactoring] remove unused lexer switches: preserve_whitespace ("pre:") and pure_blocks
	- [P5,Fix,Dev] _parseStyleAttribute: currently will not parse style strings which contain strings with semicolon inside them as style value
		// do not use such styles, use classes!
	- [P4,Fix] sequential strings are not always united into one
	- [P2,Fix] script[type="lava/fragment"] should work as s lexer switch - to allow it to break block boundaries
		// &lt;script type="lava/fragment"&gt;{#view()}&lt;/script&gt;{/view}.
		// Also correct doc.html
Parsers/ExpressionParser.js
	- [P5,Feature,Q] macros to shorten the ternary operator, for example: "{is_active -&gt; 'active'}"
	- [P3,Feature, Performance] currently, each time any variable is referenced in argument's source code - it creates a new binding config.
		Parser must unite bindings to the same variable referenced multiple times.
	- [P3,Feature] static arguments must have their value in configs
	- [P5,Refactoring] remove the dn() operator. It's existence is not possible with current architecture.
		Finish the up() operator, or remove it also.
System/App.class.js
	- [P3,Feature] app.createModule(config) - create a module with given schema
System/Enumerable.class.js
	- [P3,Feature] methods moveIndex(old_index, new_index) and moveValue(value, new_index)
		// is equivalent of removeAt, then insertAt for given value. Preserves UID.
	- [P3,Performance] Enumerable is inherited from Properties, but does not use _properties and _property_listeners.
		They should not take space in constructed objects.
	- [P5,Performance] It's possible to optimize updateFromEnumerable - do not calculate diff if there are no listeners.
		Also inspect other functions for optimization.
	- [P2,Feature] - select(), selectFirst() - like filter, but returns array, instead of modifying the instance
		// also, refactor the site:build/src/ContentLoader class for usage of new methods
System/PopoverManager.class.js
	- [P3,Bug] Tooltip blinks when moving cursor towards the tooltip
	- [P2,Feature] add an option to show empty tooltips
System/Sugar.class.js
	- [P5,Dev] always check that there are no redundant attributes on sugar tags
		// it's checked on root tag, but not on objects
	- [P5,Feature] allow to set the default widget config in sugar. It will allow to create a sugar with default options.
		// Reason: sometimes you will want to add options and other settings to sugar.
		// Such config must be merged properly.
	- [P5,Refactoring,Q] control attributes of sugar should be handled in Sugar class
	- [P3,Feature] when parsing sugar inside x:define and x:widget: sugar config must be merged with parent,
		and class name of sugar must be taken from config.
	- [P5,Feature,Q] Allow to create "alias" properties in storage objects. Reason: this will allow to create better-looking attribute names for sugar.
		For example: main attribute is called "is_active" (Boolean), alias will be called "active" (switch).
		// solution: descriptor for alias property has flag "isAlias", for example: {active: {type: "Switch", isAlias: true}, ...}.
		// Before &lt;storage&gt; tag and sugar parses the raw AST - they first collect a list of attributes,
		// which have an alias, to restrict them. When TemplateWalker walks a template - it ignores properties with isAlias flag.
	- [P4,Feature] sugar: allow content type that can map certain tags to items in storage collections.
		Aim: you will not need to write &lt;panels&gt; in &lt;accordion&gt;, just &lt;panel&gt;
System/Template.class.js
	- [P5,Performance,Q] render() function compilation.
		// Take into account that code may be compressed
	- [P5,Feature] static IF/ELSEIF/ELSE construct.
		// will include parts of template by evaluating it's conditions once.
		// Faster than regular IF view, but does not react to changes.
System/ViewManager.class.js
	- [P5,Performance,Q] speed up event dispatching and argument evaluation. Cache target and scope.
		+ Late evaluation for event arguments, as event does not always has valid targets.
	- [P5,Feature] leftclick and rightclick events.
		// algorithm: separate method for handling the click event, which checks "leftclick" and "rightclick" attributes,
		// and presence of right mouse button. Apply leftclick event on the doc.html page (for click to show method's extended description).
View/
	- [P5,Feature] View/Include.class.js - view, which takes it's template config from a variable (dynamic include)
	- [P5,Feature,Performance] View/Switch.class.js - analog of the IF view, but with one argument.
		// will also affect TemplateParser and configs
View/Foreach.class.js
	- [P3,Dev] "count" property must be read-only
	- [P5,Performance,Feature,Q] allow to reuse templates in Foreach
		// template may contain parameterized includes - such templates cannot be reused
View/Container/Element.class.js
	- [P1,Fix,Dev] if you render it's content and change any attribute before it's in DOM,
		then you will get wrong content in DOM. Make protection from such lifecycle.
		// make "is_rendered"/"waits_insertion" switch and throw an error, if setting a property while it's on
View/Refresher/Standard.class.js
	- [P2,Refactoring] Move all animation code to refresher.Animated
ClassManager.class.js
	- [P1,Feature] Add ability to store arrays in Shared (it may be named differently, like "Prototype")
		Move default input roles from InputAbstract to prototype
	- [P5,Feature,Q] Static members. Like Shared, but copied to prototype as-is. It's impossible to overwrite a Static member in inherited class.
	- [P5,Feature,Q] Function inheritance: check if function calls it's parent. If not - do not create a parent in the prototype.
	- [P3,Feature] mode, when classes are not exported. All classes exist only inside ClassManager, you can use .getConstructor() and .define()
	- [P5,Feature,Q] conditional members. Member will be in class when condition is true.
		// sometimes you want to create a build with different features included. Also some classes have debug members.
	- [P5,Feature] overrides: functions which does not need a parent
	- [P5,Feature] "final" functions and members - must not be overridden. Example: HierarchyMember._onRefreshed
	- [P5,Feature] abstract classes - classes with no constructor (instead there will be a function which throws an exception)
	- [P5,Feature] abstract functions - must be overridden in inherited classes.
		// Class with an abstract function which is not overridden - is also abstract.
		// When overriding happens - the parent function is not created
	- [P5,Feature,Q] empty class functions should not be in r[], they should be a reference somewhere to Lava.empty()/noop()
	- [P5,Feature,Q] all parent function names should be resolved automatically.
		// It will allow to insert a class in middle of the hierarchy.
		// Also assert there are no limitations for compression. <br/>
		// also rename &lt;%fname%&gt; macros in strings inside the function to current function's name (needed in exceptions).
	- [P5,Feature,Dev] wrapper for ClassManager to be used separately from the framework
	- [P5,Performance] Should it reserve nulls in object prototypes for those members, which are created in constructor?
		// Does it affect performance? Needs a test.
	- [P5,Feature] _staticInit - applied after the class is loaded or constructed, receives ClassData.
		// need to move container.Element IOS fixes into static constructor.
Serializer.js
	- [P5,Feature,Q] currently, serializing a string preserves the "\r\n" sequence.
		Convert it to "\n" by default and make a schema switch to return the old behaviour.
	- [P1,Feature] Serializer must be a separate class with config
		// 1) Add an option to serialize into valid JSON format (with quoted attributes)
		// 2) Option to remove padding and spaces <br/>
		// 3) Ability to indent functions (take from LavaBuild helper class)
transitions.js
	- [P2,Fix] more transitions (*)
Cron.js
	- [P5,Performance] use requestAnimationFrame
Lava.js
	- [P5,Refactoring] namespaces reservation: move to a separate file (this will allow to generate it in user projects)
	- [P5,Feature] create a script, which generates the file with namespaces in Lava.
	- [P2,Feature] bootstrap() should process the control (x:) attributes, for example x:resource_id
	- [P3,Feature] Lava.addType() - add a new type to Lava.types
Algorithms/Sorting/
	- [P5,Feature,Performance] Need fast unstable sort algorithm (*)

#Existing widgets
Panels
	- [P2,Feature] when panels are collapsed, but the body stays in DOM - they should sleep() their content
Accordion
	- [P5,Feature] collapseAll()
Tree
	- [P3,Feature] must not contain Morph containers inside it
Select
	- [P3,Feature] there must be a sugar which parses it's content (optgroup and option tags)
		// it will be custom function, which is independent from Sugar class.
		// Schema will define where to put the result. <br/>
		// Requires Sugar modification.
	- [P5,Refactoring] browser fixes and code that accesses elements should be in Firestorm
DropDown
	- [P3,Feature] does not support the "disabled" class (is it needed?); "open" class should be assignable via option.
Calendar
	- [P5,Feature] should be constant size, support range selection and support full localization for "now" and month name
		// in some languages month and year numbers are not arabic
Inputs
	- [P5,Feature] working form_id attribute
	- [P3,Feature] validation for email input.
		// most likely, there will be separate class input.Email: it will have internal value and update it's is_valid property
		// just like input.Number. Text input with type="email" will not have validation (it's still a text input).
	- [P3,Feature] input watermarks
		// in Lava they will be elements before the input, with negative margin. It's the most reliable way.
	- [P4,Feature] input labels

#Create widgets
	- [P2,Feature] reorderable list (with mouse support)
	- [P2,Feature] list with selectable items (multiple selection, adding/removing items with Ctrl)
	- [P3,Feature] TimePicker
	- [P3,Feature] Slider
		// with hidden input field, left and right slider
	- [P3,Feature] Menu
		// with keyboard navigation
	- [P3,Feature] Validator - a separate widget with visitor pattern for validation rules
		// wraps the input
	- [P3,Feature] ProgressBar
	- [P3,Feature] Dialog
	- [P3,Feature] Pagination
	- [P3,Feature] ColorPicker
	- [P3,Feature] Rating
	- [P3,Feature] Alert widget (floating messages with color background and dismiss button)
	- [P5,Feature] Carousel
	- [P5,Feature] DataView
	- [P5,Feature] Affix/Scrollspy
	- [P5,Feature] Lightbox
	- [P5,Feature] Autocomplete (suggest) input
	- [P5,Feature] Calendar with event scheduler

#New functionality
	- [P3,Feature] FocusManager - a class which routes keyboard input to it's current "focused" target
		(target is a widget, which supports the 'focusable' interface)
	- [P3,Feature] Lava.system.CollectionListener - batch add listeners to items in Enumerable collections
	- [P5,Feature] Unit tests for all classes
	- [P5,Feature] Advanced code compression
	- [P5,Feature] Drag-and-Drop functionality
	- [P5,Feature] UI layer
	- [P5,Feature] Delay loading of images and objects
	- [P5,Feature] ARIA compatibility for widgets
	- [P5,Feature] Server-side communication for Data layer

#Build
	- [P3,Refactoring] a better build script
	- [P5,Feature,Q] build script should remove unnecessary members that depend on switches
		// Example: Lava.exportTranslatableString should be removed, when Lava.schema.parsers.EXPORT_STRINGS is off
	- [P5,Feature] the Lava Node module must not be exported to global
	- [P5,Feature] build script should write version and commit hash to the result files
	- [P5,Feature] Some classes include static parse results. For example: Tree class uses ExpressionParser.parseScopeEval() in class body.
		Such expressions should be evaluated on server.

#Site
	- [P5,Feature] this list should be turned into something more usable.
		// People should be able to leave comments, vote for features they need, and gather requirements.
		// This may be done in external service.
	- [P5,Refactoring] the Widgets page must be assembled like Examples
	- [P3,Refactoring] there must be no calls to TemplateParser (via Lava.bootstrap) in the www directory.
		Everything must be assembled on server.
	- [P3,Feature] Widgets page: each widget must have a detailed description with usage, events, roles, properties and options
	- [P3,Feature] a demo of a native widget wrapper (for example, CodeMirror, color pickers or Select2)
	- [P5,Feature] there must be an ability to launch unit tests right on the framework site
	- [P5,Feature] code coverage for unit tests, that can be viewed online
	- [P2,Refactoring] code in examples on main page is a bit messy, build process is complicated. Correct it.
	- [P5,Feature] create "codestyle" document
	- [P2,Feature] Replace images in the tree, gif -&gt; png
		// other images should also be png

#Documentation
	- [P4,Feature] Display @throws for methods
	- [P4,Feature] Box with source code should have language indication (js, xml, ...)
	- [P3,Feature] Document global events (those, fired from App)
		// events may be marked with "@lava-global-event" tag
	- [P3,Fix] Collapsible widget: unable to describe it's option, as it does not have a constructor.
	- [P3,Feature] Paragraphs in Reference must also have links, which can be referenced by @link tag
	- [P5,Refactoring] Refactor DocPage.class.js, move operations with hash into ContentLoader.class.js
	- [P2,Feature] Display values for most class properties either in their "value" column, or in their extended description.
		// Regular expressions, short arrays, callback maps. Example: Lava.ObjectParser.yy.allowed_globals.
		// This means that some properties will have extended description, like methods.
	- [P3,Feature] On Widgets page: show widget sources in collapsible panels
	- [P5,Feature] Check: if function returns a value - than it must be described in @returns JSDoc comment
		// this can be done with Esprima
	- [P5,Feature] If parent method has @returns and inherited has JSDoc block - than JSDoc block of inherited method
		must also contain @returns
	- [P2,Feature] Show source code for classes and make ability to reference lines of code.
		Link all members to their source.
	- [P2,Feature] Ability to filter classes and class members
	- [P2,Feature] Ability to create links to class members from user interface
		// hovering a member must show a link to it
	- [P5,Feature] Versioning of the documentation
	- [P2,Feature] Display "defined" and "overridden" fields for each member.
	- [P2,Feature] Tables with members must be collapsible. Tables with mixins must be collapsed by default.
	- [P1,Feature] Links to members must have "short" "middle" and "long" titles. Versions can be chosen by @sl (short link) and @fl (full link) tags.
		// Example: "Lava.mixin.Properties#on" - long, "Properties#on" - middle, "on" - short.
		// Also correct all links with title.

#Maintenance
	- [P5,Feature] Automatic on-commit codestyle validation
		// one "var" per function, no camelCase, etc...
